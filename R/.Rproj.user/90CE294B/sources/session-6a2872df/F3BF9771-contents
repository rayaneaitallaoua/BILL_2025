---
title: "GQ_AF_markdown.R"
author: "heloise_calzan"
date: "2025-02-13"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


```{r cars}
setwd("E:\\github\\BILL_2025\\R")


# Step 1: Load necessary libraries
library(tidyverse)
library(gridExtra)
library(dplyr)
```

# Analyse préliminaires Genotype quality & Allelic frequency

```{r cars}
# Step 2: Import the data
af_data <- read.table("AF_per_SV.txt", header = FALSE, col.names = c("Frequency", "AF"))
gq_data <- read.table("GQ_per_SNP.txt", header = FALSE, col.names = c("Quality", "GQ"))

# Step 3: Check the structure of the data
glimpse(af_data)
glimpse(gq_data)
summary(af_data)
summary(gq_data)
```



```{r}
# Step 4: Create the histograms
af_plot <- ggplot(af_data, aes(x = AF)) +
  geom_histogram(binwidth = 0.05, fill = "blue", color = "black", alpha = 0.7) +  # Increased binwidth
  labs(title = "Allele Frequency Distribution per SV", x = "Allele Frequency (AF)", y = "Frequency") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))


gq_plot <- ggplot(gq_data, aes(x = GQ)) +
  geom_histogram(binwidth = 1, fill = "green", color = "black", alpha = 0.7) +
  labs(title = "Genotype Quality Distribution per SNP", x = "Genotype Quality (GQ)", y = "Frequency") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

# Step 5: Arrange the plots side by side
grid.arrange(af_plot, gq_plot, ncol = 2)
```

```{r}
sapply(af_data, FUN = class)
summary(af_data$AF)
length(af_data$AF)#130
length(unique(af_data$AF))#130

af_data$AF_factor <- as.factor(af_data$AF)
ggplot(data = af_data, aes(x = AF_factor, y = Frequency)) +
  geom_bar(stat = "identity", width = 0.5, color="#339966", fill="#66CC99") +
  geom_text(aes(label=Frequency), vjust=-0.5, hjust = 0.5, size=2.2) +
  theme(legend.position = "none")  +
  ggtitle("Allele Frequency Distribution per SV") +
  xlab("Fréquence Allélique") + 
  ylab("Fréquence")+
  xlim("0", "1.1") +
  scale_x_discrete(breaks = levels(af_data$AF_factor)[seq(1, length(levels(af_data$AF_factor)), by = 5)])+
  theme_classic() +
  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1)) 
 


sapply(gq_data, FUN = class)#integer et numeric
sapply(gq_data, FUN = summary)
sapply(gq_data, FUN = length)
sapply(gq_data, FUN = function(x) length(unique(x)))
length(unique(af_data$AF))
unique(gq_data$Quality)
#Quality : proba que le site n'a pas de variant : qualité de 20 : 1% de chance qu'il n'y pas de variant
#on veut que ce soit le plus haut possible


#gq_data$ <- as.factor(af_data$AF)
gq_data$GQ
gq_data$Quality_factor <- as.factor(gq_data$Quality)
ggplot(data = gq_data, aes(x = Quality_factor, y = GQ)) +
  geom_boxplot() +
  theme_classic()

names(gq_data)[names(gq_data) == "Quality"] <- "Frequency"

ggplot(data = gq_data, aes(x = GQ, y = Frequency)) +
  geom_bar(stat = "identity", width = 0.5, color="#339966", fill="#66CC99") +
  geom_text(aes(label=Frequency), vjust=-0.5, hjust = 0.5, size=2.2) +
  theme(legend.position = "none")  +
  ggtitle("Genotype Quality Distribution per SNP") +
  xlab("Genotype Quality (GQ)") + 
  ylab("Frequency")+
  #xlim("0", "1.1") +
  #scale_x_discrete(breaks = levels(af_data$AF_factor)[seq(1, length(levels(af_data$AF_factor)), by = 5)])+
  theme_classic() 
  #theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1)) 
 



```

```{r}
#Créer des groupes (breaks) pour la qualité du génotype (par exemple, de 1 à 5, 6 à 10, etc.)

gq_data$GenotypeQuality_group <- cut(gq_data$GQ,
                                  breaks = seq(1, 47, by = 1),   # Définir les breaks comme souhaité
                                  labels = c( "1-2",  "2-3",  "3-4",  "4-5",  "5-6",  "6-7",  "7-8",  "8-9",  "9-10", "10-11", "11-12", "12-13", "13-14", "14-15", "15-16", "16-17", "17-18", "18-19", "19-20", "20-21", "21-22", "22-23", "23-24", "24-25", "25-26", "26-27", "27-28", "28-29", "29-30", "30-31", "31-32", "32-33", "33-34", "34-35", "35-36", "36-37", "37-38", "38-39", "39-40", "40-41", "41-42", "42-43", "43-44", "44-45", "45-46", "46-47"), right = FALSE)


#max(gq_data$GQ) # 46.194
#min(gq_data$GQ) # 1.444
gq_data$GQ %>% max()

ggplot(gq_data, aes(x = GQ)) +
  geom_histogram(binwidth = 1, fill = "green", color = "black", alpha = 0.7) +
  labs(title = "Genotype Quality Distribution per SNP", x = "Genotype Quality (GQ)", y = "Frequency") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

ggplot(gq_data, aes(x = GenotypeQuality_group, y = Frequency, fill = GenotypeQuality_group)) +
  geom_col() +  # Utiliser geom_col() car Frequency est déjà une valeur
  labs(title = "Fréquence en fonction de la Qualité du Génotype",
       x = "Qualité du Génotype (GQ, groupée)", y = "Fréquence") +
  theme_minimal() +
  theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))

gq_plot_2.0 <- ggplot(gq_data, aes(x = GQ)) +
  geom_histogram(binwidth = 2, fill = "aquamarine3", color = "aquamarine4", alpha = 0.8) +  
  labs(title = "Fréquence en fonction de la Qualité du Génotype",
       x = "Qualité du Génotype (GQ)", y = "Fréquence") +
  scale_x_continuous(breaks = seq(1, 47, by = 2)) +
  theme_minimal()
gq_plot_2.0
```

```{r}
ggsave(plot = gq_plot_2.0, "gqplot.png")
```


#Données brutes mutations SV et SNP

```{r}
table_nb_variants <- read.csv("counts.csv" , header = TRUE, sep = ";",  na ="NA", stringsAsFactors = FALSE)

table_snp <- read.csv("snp.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
table_sv <- read.csv("sv.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)

names(table_snp)
names(table_snp)[names(table_snp) == "ECHANTILLONQUALITE"] <- "ECHANTILLON"
names(table_snp)[names(table_snp) == "X"] <- "QUALITE"
```

```{r}
#count_snp
table_snp %>% names()
count_snp <- table_snp %>% group_by(GEN, ECH) %>% count()
count_snp %>% names()
names(count_snp)[names(count_snp) == "n"] <- "COUNT"
names(count_snp)[names(count_snp) == "GEN"] <- "GENERATION"
names(count_snp)[names(count_snp) == "ECH"] <- "ECHANTILLON"
table_nb_variants$SV_SNP <- as.factor("SV")
count_snp$SV_SNP <- as.factor("SNP")
count_snp$TYPE <- as.factor("SUB")#pour substitution

#count_SV
table_sv %>% names()
count_ins_del_sv <- table_sv %>% group_by(GENERATION, ECHANTILLON, TYPE.DE.MUTATION) %>% count()
names(count_ins_del_sv)[names(count_ins_del_sv) == "n"] <- "COUNT_TYPE"
names(count_ins_del_sv)[names(count_ins_del_sv) == "TYPE.DE.MUTATION"] <- "TYPE"

count_ins_del_sv$SV_SNP <- as.factor("SV")
table_nb_variants %>% names()
count_ins_del_sv %>% names()
table_nb_variants %>% nrow()
count_ins_del_sv %>% nrow()
count_ins_del_sv <- left_join(count_ins_del_sv, table_nb_variants, by = c("GENERATION" , "ECHANTILLON" , "SV_SNP"))

remove(table_nb_variants)


count_snp <- count_snp %>% mutate(COUNT_TYPE = COUNT)
count_snp %>% names()
count_ins_del_sv %>% names()
count_ins_del_sv <- count_ins_del_sv %>% relocate(COUNT, .after = ECHANTILLON)
count_snp <- count_snp %>% relocate(SV_SNP, .after = COUNT_TYPE)

count_snp_sv_type <- rbind(count_snp, count_ins_del_sv)


#ajout d'une colonne traitement : 
count_snp_sv_type <- count_snp_sv_type %>% 
  mutate(TRAITEMENT = case_when(GENERATION == "P15"~"aucun", 
                                     (GENERATION != "P15" & ECHANTILLON <=5) ~ "Froid",
                                     (GENERATION != "P15" & ECHANTILLON > 5) ~ "Chaud"))
count_snp_sv_type <- count_snp_sv_type %>% relocate(TRAITEMENT, .after = ECHANTILLON)

```

Je vais travailler sur : count_snp_sv_type
```{r}
count_snp_sv_type %>%
  ggplot(aes(x = GENERATION, y = COUNT_TYPE, color= TYPE)) +
  geom_point() +
  theme_bw()

count_snp_sv_type[which(count_snp_sv_type$SV_SNP == "SV"), ] %>%
  ggplot(aes(x = GENERATION, y = COUNT_TYPE, color= TYPE)) +
  geom_point() +
  theme_bw()

#count_snp_sv_type[,c("GENERATION", "ECHANTILLON", "COUNT", "SV_SNP")] %>% unique() %>%
#  ggplot(aes(x = SV_SNP, y = COUNT, color=SV_SNP)) +
#  geom_boxplot(outlier.colour="black", outlier.shape=16, outlier.size=2, outlier.alpha = 0.5 ,notch=FALSE) +
#  geom_dotplot(aes(fill = SV_SNP) ,binaxis='y', stackdir='center', dotsize=1, alpha = 0.7) +
#   #geom_jitter(shape=16, position=position_jitter(0.2), alpha = 0.5) 
#  scale_fill_brewer(palette="Dark2") +
#  scale_color_brewer(palette="Dark2") +
#  facet_wrap(~ GENERATION, scales = "free_y")  +  #, ncol = 5
#  labs(x = "mutation SNP et SV", y = "nombre de variants") +
#  ggtitle("Statistiques des mutation de type SNP et SV par Génération") +
#  theme_classic() 
#  theme(plot.title = element_text(hjust = 0.5))

count_snp_sv_type %>% 
  ggplot(aes(x = GENERATION, y = COUNT_TYPE, color= TYPE)) +
  geom_boxplot(outlier.colour="black", outlier.shape=16, outlier.size=2, outlier.alpha = 0.5 ,notch=FALSE, position = position_dodge(1)) +
  geom_dotplot(aes(fill = TYPE) ,binaxis='y', stackdir='center', dotsize=0.5, alpha = 0.7, position = position_dodge(1)) +
   #geom_jitter(shape=16, position=position_jitter(0.2), alpha = 0.5) 
  scale_fill_brewer(palette="Dark2") +
  scale_color_brewer(palette="Dark2") +
  #facet_wrap(~ GENERATION)  +  #, ncol = 5
  labs(x = "mutation SNP et SV", y = "nombre de variants") +
  ggtitle("Statistiques des mutation de type SNP et SV par Génération") +
  theme_classic() 

count_snp_sv_type %>% 
  filter(TYPE %in% c("SUB", "INS")) %>%
  ggplot(aes(x = GENERATION, y = COUNT_TYPE, color= TYPE)) +
  geom_boxplot(outlier.colour="black", outlier.shape=16, outlier.size=2, outlier.alpha = 0.5 ,notch=FALSE, position = position_dodge(1)) +
  geom_dotplot(aes(fill = TYPE) ,binaxis='y', stackdir='center', dotsize=0.5, alpha = 0.7, position = position_dodge(1)) +
   #geom_jitter(shape=16, position=position_jitter(0.2), alpha = 0.5) 
  scale_fill_brewer(palette="Dark2") +
  scale_color_brewer(palette="Dark2") +
  #facet_wrap(~ GENERATION)  +  #, ncol = 5
  labs(x = "mutation SNP et SV", y = "nombre de variants") +
  ggtitle("Statistiques des mutation de type SNP et SV par Génération") +
  theme_classic()

count_snp_sv_type %>% 
  #filter(TYPE %in% c("SUB", "INS")) %>%
  ggplot(aes(x = GENERATION, y = COUNT_TYPE, color= TYPE)) +
  geom_boxplot(outlier.colour="black", outlier.shape=16, outlier.size=2, outlier.alpha = 0.5 ,notch=FALSE, position = position_dodge(1)) +
  geom_dotplot(aes(fill = TYPE) ,binaxis='y', stackdir='center', dotsize=0.5, alpha = 0.7, position = position_dodge(1)) +
   #geom_jitter(shape=16, position=position_jitter(0.2), alpha = 0.5) 
  scale_fill_brewer(palette="Dark2") +
  scale_color_brewer(palette="Dark2") +
  facet_wrap(~ TYPE, scales = "free")  +  #, ncol = 5
  labs(x = "mutation SNP et SV", y = "nombre de variants") +
  ggtitle("distribution des statistiques des mutation de type SNP et SV par Génération") +
  theme_classic()

ggsave("P_nb_variant_generation.png", width = 14, height = 6)
```


```{r, width = 8, height = 14}
plot_boxplot_snpsvEff <-count_snp_sv_type %>% 
  ggplot(aes(x = GENERATION, y = COUNT_TYPE, color= TRAITEMENT)) +
  geom_boxplot(outlier.colour="black", position = position_dodge(1) ,outlier.shape=16, outlier.size=2, outlier.alpha = 0.5 ,notch=FALSE) +
  geom_dotplot(aes(fill = TRAITEMENT) , position = position_dodge(1), binaxis='y', stackdir='center', dotsize=0.5, alpha = 0.7) +
   #geom_jitter(shape=16, position=position_jitter(0.2), alpha = 0.5) 
  scale_fill_brewer(palette="Dark2") +
  scale_color_brewer(palette="Dark2") +
  facet_wrap(~ TYPE, scales = "free", ncol = 1)  +  #, ncol = 5
  labs(x = "Génération", y = "Effectif") +
  ggtitle("Statistiques des types de mutations en fonction du traitement et de la génération") +
  theme_classic() +
  theme(axis.title.y = element_text(angle=0, vjust = 0.5))

plot_boxplot_snpsvEff2 <-count_snp_sv_type %>% 
  ggplot(aes(x = GENERATION, y = COUNT_TYPE, color= TRAITEMENT)) +
  geom_boxplot(outlier.colour="black", position = position_dodge(1) ,outlier.shape=16, outlier.size=2, outlier.alpha = 0.5 ,notch=FALSE) +
  geom_dotplot(aes(fill = TRAITEMENT) , position = position_dodge(1), binaxis='y', stackdir='center', dotsize=0.3, alpha = 0.7) +
   #geom_jitter(shape=16, position=position_jitter(0.2), alpha = 0.5) 
  scale_fill_brewer(palette="Dark2") +
  scale_color_brewer(palette="Dark2") +
  facet_wrap(~ TYPE, scales = "free")  +  #, ncol = 5
  labs(x = "Génération", y = "Effectif") +
  ggtitle("Distribution des statistiques des types de mutations en fonction du traitement et de la génération") +
  theme_classic() +
  theme(axis.title.y = element_text(angle=0, vjust = 0.5))

#ggsave(plot = plot_boxplot_snpsvEff, "plot_boxplot_snpsvEff.png", width = 8, height = 12)
ggsave(plot = plot_boxplot_snpsvEff2, "plot_boxplot_snpsvEff2.png", width = 14, height = 6)
```


```{r}
library(rstatix)
#Comparer plusieurs générations entre elles : 
#kruskal_test(count_snp_sv_type[which(count_snp_sv_type$TYPE == "SUB"),], COUNT_TYPE ~ GENERATION)
count_snp_sv_type %>%
  filter(TYPE == "SUB") %>%
  kruskal.test(COUNT_TYPE ~ GENERATION) # Kruskal-Wallis chi-squared = 415.16, df = 8, p-value < 2.2e-16

count_snp_sv_type %>%
  filter(TYPE == "INS") %>%
  kruskal.test(COUNT_TYPE ~ GENERATION)
#Kruskal-Wallis chi-squared = 313.07, df = 8, p-value < 2.2e-16

count_snp_sv_type %>%
  filter(TYPE == "DEL") %>%
  kruskal.test(COUNT_TYPE ~ GENERATION)
#Kruskal-Wallis chi-squared = 220.91, df = 8, p-value < 2.2e-16


#Si la p-value est < 0.05, il y a une différence significative entre les générations.
#Tu peux ensuite faire un test post-hoc pour voir quelles générations diffèrent :
count_snp_sv_type$GENERATION <- as.factor(count_snp_sv_type$GENERATION)

count_snp_sv_type %>%
  filter(TYPE == "SUB", 
         GENERATION == "P90") %>% nrow() #10, #10, #10, #10, 10
count_snp_sv_type$COUNT_TYPE <- as.numeric(count_snp_sv_type$COUNT_TYPE)

# Filtrer uniquement les générations P15 et P30 -> SUBSTITUTIONS
df_test <- count_snp_sv_type %>% filter(TYPE == "SUB", GENERATION %in% c("P15", "P30")) #%>%
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") # 0.12

df_test <- count_snp_sv_type %>% filter(TYPE == "SUB", GENERATION %in% c("P15", "P50")) 
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") # 0.14

df_test <- count_snp_sv_type %>% filter(TYPE == "SUB", GENERATION %in% c("P15", "P65"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") # 0.82

df_test <- count_snp_sv_type %>% filter(TYPE == "SUB", GENERATION %in% c("P15", "P90"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") # 0.54

df_test <- count_snp_sv_type %>% filter(TYPE == "SUB", GENERATION %in% c("P30", "P50"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") # 0.82

df_test <- count_snp_sv_type %>% filter(TYPE == "SUB", GENERATION %in% c("P30", "P65"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") #0.00088

df_test <- count_snp_sv_type %>% filter(TYPE == "SUB", GENERATION %in% c("P30", "P90"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") #0.00018

df_test <- count_snp_sv_type %>% filter(TYPE == "SUB", GENERATION %in% c("P50", "P65"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") #0.00033

df_test <- count_snp_sv_type %>% filter(TYPE == "SUB", GENERATION %in% c("P50", "P90"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") #0.00018

df_test <- count_snp_sv_type %>% filter(TYPE == "SUB", GENERATION %in% c("P65", "P90"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") #0.57

# INSERTIONS
df_test <- count_snp_sv_type %>% filter(TYPE == "INS", GENERATION %in% c("P15", "P30")) 
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") # 0.15

df_test <- count_snp_sv_type %>% filter(TYPE == "INS", GENERATION %in% c("P15", "P50")) 
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") #0.32

df_test <- count_snp_sv_type %>% filter(TYPE == "INS", GENERATION %in% c("P15", "P65"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") # 0.2

df_test <- count_snp_sv_type %>% filter(TYPE == "INS", GENERATION %in% c("P15", "P90"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") # 5e-04

df_test <- count_snp_sv_type %>% filter(TYPE == "INS", GENERATION %in% c("P30", "P50"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") # 0.057

df_test <- count_snp_sv_type %>% filter(TYPE == "INS", GENERATION %in% c("P30", "P65"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") #0.074

df_test <- count_snp_sv_type %>% filter(TYPE == "INS", GENERATION %in% c("P30", "P90"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") #0.00028

df_test <- count_snp_sv_type %>% filter(TYPE == "INS", GENERATION %in% c("P50", "P65"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") #0.18

df_test <- count_snp_sv_type %>% filter(TYPE == "INS", GENERATION %in% c("P50", "P90"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") #2e-04

df_test <- count_snp_sv_type %>% filter(TYPE == "INS", GENERATION %in% c("P65", "P90"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") #0.78

# DELETION
df_test <- count_snp_sv_type %>% filter(TYPE == "DEL", GENERATION %in% c("P15", "P30")) 
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") # 0.29

df_test <- count_snp_sv_type %>% filter(TYPE == "DEL", GENERATION %in% c("P15", "P50")) 
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") #0.59

df_test <- count_snp_sv_type %>% filter(TYPE == "DEL", GENERATION %in% c("P15", "P65"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") # 0.03

df_test <- count_snp_sv_type %>% filter(TYPE == "DEL", GENERATION %in% c("P15", "P90"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") # 0.029

df_test <- count_snp_sv_type %>% filter(TYPE == "DEL", GENERATION %in% c("P30", "P50"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") # 0.057

df_test <- count_snp_sv_type %>% filter(TYPE == "DEL", GENERATION %in% c("P30", "P65"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") #0.048

df_test <- count_snp_sv_type %>% filter(TYPE == "DEL", GENERATION %in% c("P30", "P90"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") #0.93

df_test <- count_snp_sv_type %>% filter(TYPE == "DEL", GENERATION %in% c("P50", "P65"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") #0.02

df_test <- count_snp_sv_type %>% filter(TYPE == "DEL", GENERATION %in% c("P50", "P90"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") #0.018

df_test <- count_snp_sv_type %>% filter(TYPE == "DEL", GENERATION %in% c("P65", "P90"))
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$GENERATION, p.adjust.method = "bonferroni") #0.71



#Cela compare chaque paire de générations en ajustant les p-values.

#Comparaison des traitements au sein d’une génération

#Si tu veux comparer les traitements au sein d’une même génération, utilise Wilcoxon (si 2 traitements) ou Kruskal-Wallis (si >2 traitements).
#Wilcoxon pour 2 traitements

#Si tu compares deux traitements (ex: "aucun" vs "traité") dans P15 :
df_test <- count_snp_sv_type %>% filter(TYPE == "SUB", GENERATION == "P30") 
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$TRAITEMENT, p.adjust.method = "bonferroni") #0.095
df_test <- count_snp_sv_type %>% filter(TYPE == "SUB", GENERATION == "P50") 
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$TRAITEMENT, p.adjust.method = "bonferroni") #0.21
df_test <- count_snp_sv_type %>% filter(TYPE == "SUB", GENERATION == "P65") 
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$TRAITEMENT, p.adjust.method = "bonferroni") #0.22
df_test <- count_snp_sv_type %>% filter(TYPE == "SUB", GENERATION == "P90") 
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$TRAITEMENT, p.adjust.method = "bonferroni") #1 : impossible de calculer la p-value exacte avec des ex-aequos


df_test <- count_snp_sv_type %>% filter(TYPE == "INS", GENERATION == "P30") 
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$TRAITEMENT, p.adjust.method = "bonferroni") #0.89
df_test <- count_snp_sv_type %>% filter(TYPE == "INS", GENERATION == "P50") 
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$TRAITEMENT, p.adjust.method = "bonferroni") #1
df_test <- count_snp_sv_type %>% filter(TYPE == "INS", GENERATION == "P65") 
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$TRAITEMENT, p.adjust.method = "bonferroni") #0.5
df_test <- count_snp_sv_type %>% filter(TYPE == "INS", GENERATION == "P90") 
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$TRAITEMENT, p.adjust.method = "bonferroni") #0.035



df_test <- count_snp_sv_type %>% filter(TYPE == "DEL", GENERATION == "P30") 
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$TRAITEMENT, p.adjust.method = "bonferroni") #0.48
df_test <- count_snp_sv_type %>% filter(TYPE == "DEL", GENERATION == "P50") 
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$TRAITEMENT, p.adjust.method = "bonferroni") #0.71
df_test <- count_snp_sv_type %>% filter(TYPE == "DEL", GENERATION == "P65") 
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$TRAITEMENT, p.adjust.method = "bonferroni") 
df_test <- count_snp_sv_type %>% filter(TYPE == "DEL", GENERATION == "P90") 
pairwise.wilcox.test(df_test$COUNT_TYPE, df_test$TRAITEMENT, p.adjust.method = "bonferroni") #0.047


#Si la p-value est < 0.05, il y a une différence significative entre les traitements.

```
Est-ce que la frequence des types de mutation change au cours des génération et selon les traitements
```{r}
nb_mutation_ech_gen <- count_snp_sv_type %>% unique() %>% aggregate (COUNT ~ GENERATION + ECHANTILLON, FUN = function(x) sum(unique(x)))

names(nb_mutation_ech_gen)[names(nb_mutation_ech_gen) == "COUNT"] <- "COUNT_ech_gen"

count_snp_sv_type <- left_join(count_snp_sv_type, nb_mutation_ech_gen)
count_snp_sv_type <- count_snp_sv_type %>% mutate(freq_type = COUNT_TYPE/COUNT_ech_gen)
remove(nb_mutation_ech_gen, df_test)
count_snp_sv_type$freq_type <-  round(count_snp_sv_type$freq_type, 3)

#frequence moyenne par génération
df_freq_moy_gen <- count_snp_sv_type %>% aggregate(freq_type ~ GENERATION + TYPE, FUN = mean)
ggplot(df_freq_moy_gen, aes(x = GENERATION, y = freq_type, color = TYPE)) +
  geom_point()

df_freq_moy_gen_traitement <- count_snp_sv_type %>% aggregate(freq_type ~ GENERATION + TRAITEMENT + TYPE, FUN = mean)
ggplot(df_freq_moy_gen_traitement, aes(x = GENERATION, y = freq_type, color = TYPE)) +
  geom_point() +
  facet_wrap(~TRAITEMENT)
  geom_point()
  
ggplot(df_freq_moy_gen_traitement, aes(x = GENERATION, y = freq_type, color = TRAITEMENT)) +
  geom_point() +
  facet_wrap(~TYPE)
  geom_point()
  
##########
#Dans les SV
nb_mut_sv_ech_gen_t <- count_snp_sv_type[which(count_snp_sv_type$SV_SNP == "SV"),]
nb_mut_sv_ech_gen_t <- nb_mut_sv_ech_gen %>% mutate(freq_indel = COUNT_TYPE/COUNT)
nb_mut_sv_ech_gen_t <- nb_mut_sv_ech_gen %>% aggregate(freq_indel ~ GENERATION + TRAITEMENT + TYPE, FUN = mean)
df2 <- nb_mut_sv_ech_gen_t %>% aggregate(freq_indel ~ GENERATION + TRAITEMENT + TYPE, FUN = sd)
names(df2)[names(df2) == "freq_indel"] <- "freq_indel_sd"
nb_mut_sv_ech_gen_t <- left_join(nb_mut_sv_ech_gen_t, df2)
remove(df2)

nb_mut_sv_ech_gen_t %>%
  ggplot(aes(x = as.factor(GENERATION), y = freq_indel, fill = TRAITEMENT)) +
  geom_bar( stat = "identity", position = position_dodge(1)) +
  geom_text(aes(label = freq_indel), stat = "identity", vjust = -1 , size = 2, color = "black")+
  #geom_errorbar(aes(ymin= freq_indel - freq_indel_sd, ymax=freq_indel + freq_indel_sd), width=.2, position = position_dodge(1), na.rm = TRUE) +
  #geom_text(aes(label = freq_indel), stat = "identity",  position = position_fill(.5), size = 2, color = "black") +
  scale_fill_brewer(palette="Dark2") +
  facet_wrap(~TYPE)
  theme_bw()
  
nb_mut_sv_ech_gen_t %>%
  ggplot(aes(x = as.factor(GENERATION), y = freq_indel, fill = TYPE)) +
  geom_bar( stat = "identity", position = position_dodge(1)) +
  geom_text(aes(label = freq_indel), stat = "identity", vjust = 0 , size = 2, color = "black")+
  #geom_errorbar(aes(ymin= freq_indel - freq_indel_sd, ymax=freq_indel + freq_indel_sd), width=.2, position = position_dodge(1), na.rm = TRUE) +
  #geom_text(aes(label = freq_indel), stat = "identity",  position = position_fill(.5), size = 2, color = "black") +
  scale_fill_brewer(palette="Dark2") +
  facet_wrap(~TRAITEMENT)
  theme_bw()

nb_mut_sv_ech_gen_t %>%
  ggplot(aes(x = as.factor(GENERATION), y = freq_indel, color = TRAITEMENT)) +
  geom_point() +
  geom_line(aes(group = TRAITEMENT)) +
  scale_fill_brewer(palette="Dark2") +
  facet_wrap(~TYPE) +
  theme_bw()
```


```{r}
freq_moy_indel_gen_2 <- nb_mut_sv_ech_gen %>% aggregate(freq_indel ~ GENERATION + TYPE, FUN = mean)
df2 <- nb_mut_sv_ech_gen %>% aggregate(freq_indel ~ GENERATION + TYPE, FUN = sd)
names(df2)[names(df2) == "freq_indel"] <- "freq_indel_sd"
freq_moy_indel_gen_2 <- left_join(freq_moy_indel_gen_2, df2)
remove(df2)

freq_moy_indel_gen_2 %>%
  ggplot(aes(x = as.factor(GENERATION), y = freq_indel, fill = TYPE)) +
  geom_bar( stat = "identity", position = position_dodge(1)) +
  #geom_text(aes(label = freq_indel), position = position_dodge(),stat = "identity", vjust = -1 , size = 2, color = "black")+
  #geom_errorbar(aes(ymin= freq_indel - freq_indel_sd, ymax=freq_indel + freq_indel_sd), width=.2, position = position_dodge(1), na.rm = TRUE) +
  #geom_text(aes(label = freq_indel), stat = "identity",  position = position_fill(.5), size = 2, color = "black") +
  scale_fill_brewer(palette="Dark2") +
  #facet_wrap(~TYPE)
  theme_bw()

freq_moy_indel_gen_2 %>%
  ggplot(aes(x = as.factor(GENERATION), y = freq_indel, color = TYPE)) +
  geom_point() +
  geom_line(aes(group = TYPE)) +
  scale_fill_brewer(palette="Dark2") +
  theme_bw()

```



ICI

choisir les graphes : 
frequence moyenne des indels par éch au cours des générations et au au cours des générations / par traitement
Fréquence moyenne des indels par génération (les barplot en dessous) 
distribution nb des indels en boxplot (en dessous -> choisir)
Regarder si la longeur moyenne des indels tend à augmenter au cours du temps ET par traitement (deux graphes)














```{r}
#count_snp_sv_type <- #count_snp_sv_type %>% mutate(GEN_num = case_when(GENERATION == "P15" ~ 15, GENERATION == "P30" ~ 30, GENERATION == "P50" ~ 50, GENERATION == "P65" ~ 65, GENERATION == "P90" ~ 90,))

#count_snp_sv_type <- #count_snp_sv_type %>% mutate(TRAITEMENT2 = case_when(ECHANTILLON <=5 ~ "froid", ECHANTILLON > 5 ~ "Chaud"))

#count_snp_sv_type %>%
#  arrange(ECHANTILLON, GEN_num) %>% 
#  ggplot(aes(x = GEN_num, y = #count_TYPE, color= TRAITEMENT)) +
#  geom_point(alpha = 0.7) +
#  geom_line(aes(group = interaction(ECHANTILLON, TRAITEMENT))) +
#  facet_wrap(~TYPE, scales = "free_y", ncol = 1) +
#  theme_bw()


#count_snp_sv_type %>%
#  arrange(ECHANTILLON, GEN_num) %>% 
#  mutate(groupe = paste(TRAITEMENT2, ECHANTILLON)) %>%
#  mutate(groupe = as.factor(paste(TRAITEMENT2, ECHANTILLON))) %>%
#  ggplot(aes(x = GEN_num, y = #count_TYPE, color= TRAITEMENT)) +
#  geom_point(aes()) +
#  geom_line(aes(group = groupe), alpha = 0.6) +
#  facet_wrap(~TYPE, scales = "free_y", ncol = 1) +
#  theme_bw()


#count_snp_sv_type %>%
#  ggplot(aes(x = GEN_num, y = #count_TYPE, color= TRAITEMENT)) +
#  geom_point(aes()) +
#  geom_line(aes(group = ECHANTILLON), alpha = 0.6) +
#  facet_wrap(~TYPE, scales = "free_y", ncol = 1) +
#  theme_bw()


#test <- #count_snp_sv_type %>%
#  arrange(ECHANTILLON, GEN_num) %>%
#  group_by(ECHANTILLON) %>%
#  mutate(GEN_num_prev = lag(GEN_num)) %>%
#  ungroup()

#ggplot(test, aes(x = GEN_num, y = #count_TYPE, color = TRAITEMENT)) +
#  geom_point() +
#  geom_line(aes(group = interaction(ECHANTILLON, GEN_num_prev)), na.rm = TRUE) + 
#  facet_wrap(~TYPE, scales = "free_y", ncol = 1) +
#  theme_bw()



```





```{r}
#table SV
str(table_sv)
sapply(table_sv, FUN = class)
table_sv$ORF <- as.factor(table_sv$ORF)
table_sv$GENERATION <- as.factor(table_sv$GENERATION)
table_sv$TYPE.DE.FICHIER <- as.factor(table_sv$TYPE.DE.FICHIER)
table_sv$TYPE.DE.MUTATION <- as.factor(table_sv$TYPE.DE.MUTATION)

summary(table_sv)
sapply(table_sv, FUN = levels)

table_sv[which(table_sv$ORF == "."),]


table_sv[which(table_sv$GENERATION == "P15"),]$ECHANTILLON %>% unique #10  3  4  5  6  7  8  9
table_sv[which(table_sv$GENERATION == "P30"),]$ECHANTILLON %>% unique #10  1  2  3  4  5  6  7  8  9
table_sv[which(table_sv$GENERATION == "P50"),]$ECHANTILLON %>% unique #10  1  2  3  4  5  6  7  8  9
table_sv[which(table_sv$GENERATION == "P65"),]$ECHANTILLON %>% unique # 1 2 3 7
table_sv[which(table_sv$GENERATION == "P90"),]$ECHANTILLON %>% unique #10  1  2  3  4  5  6  7  8  9

summary(table_sv$FREQUENCE.ALL)
```

## Les SV
compter le nb d'insertion et le nombre de deletion par échantillon et génération
on peut faire le % d'insertion aussi
faire leur longueur moyenne, medianne avec les max, les min les sq
rajouter traitement chaud, traitement froid et pas de traitement

```{r}
#rajouter traitement chaud, traitement froid et pas de traitement
table_sv <- table_sv %>% 
  mutate(traitement_type = case_when(GENERATION == "P15"~"non_traite", 
                                     (GENERATION != "P15" & ECHANTILLON <=5) ~ "traitement_froid",
                                     (GENERATION != "P15" & ECHANTILLON > 5) ~ "traitement_chaud"))
table_sv %>% names()

df_mut_sv <- table_sv %>% 
  group_by(GENERATION, ECHANTILLON, TYPE.DE.MUTATION) %>%
  count()
  #pivot_wider(names_from = TYPE.DE.MUTATION)


names(df_mut_sv)[names(df_mut_sv) == "n"] <- "effectif_type_mutation"

df_mut_sv <- left_join(df_mut_sv, unique(table_sv[,c("GENERATION", "ECHANTILLON", "traitement_type")]), by = c("ECHANTILLON", "GENERATION")) 



df_mut_sv2 <- df_mut_sv %>% aggregate(effectif_type_mutation ~ GENERATION + ECHANTILLON, FUN = sum)
names(df_mut_sv2)[names(df_mut_sv2) == "effectif_type_mutation"] <- "effectif_mutation"
df_mut_sv <- left_join(df_mut_sv, df_mut_sv2, by = c("GENERATION", "ECHANTILLON"))
remove(df_mut_sv2)
df_mut_sv <- df_mut_sv %>% mutate(freq_mutation_type = effectif_type_mutation/effectif_mutation)
df_mut_sv$freq_mutation_type <- round(df_mut_sv$freq_mutation_type, 3)

#frequence allélique par type de mutation
table_sv %>% names()
df <- table_sv %>% aggregate(FREQUENCE.ALL ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = mean)
df1 <- table_sv %>% aggregate(FREQUENCE.ALL ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = median)
df2 <- table_sv %>% aggregate(FREQUENCE.ALL ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = sd)
df3 <- table_sv %>% aggregate(FREQUENCE.ALL ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = max)
df4 <- table_sv %>% aggregate(FREQUENCE.ALL ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = min)

names(df)[names(df) == "FREQUENCE.ALL"] <- "FREQUENCE.ALL_mean"
names(df1)[names(df1) == "FREQUENCE.ALL"] <- "FREQUENCE.ALL_median"
names(df2)[names(df2) == "FREQUENCE.ALL"] <- "FREQUENCE.ALL_sd"
names(df3)[names(df3) == "FREQUENCE.ALL"] <- "FREQUENCE.ALL_max"
names(df4)[names(df4) == "FREQUENCE.ALL"] <- "FREQUENCE.ALL_min"

df <- left_join(df, df1, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))
df <- left_join(df, df2, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))
df <- left_join(df, df3, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))
df <- left_join(df, df4, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))
df_mut_sv <- left_join(df_mut_sv, df, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))

remove(df, df1, df2, df3, df4)
#longueur du type de mutation par generation et échantillon
table_sv %>% names()
df <- table_sv %>% aggregate(LONGUEUR ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = mean)
df1 <- table_sv %>% aggregate(LONGUEUR ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = median)
df2 <- table_sv %>% aggregate(LONGUEUR ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = sd)
df3 <- table_sv %>% aggregate(LONGUEUR ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = max)
df4 <- table_sv %>% aggregate(LONGUEUR ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = min)

names(df)[names(df) == "LONGUEUR"] <- "LONGUEUR_mean"
names(df1)[names(df1) == "LONGUEUR"] <- "LONGUEUR_median"
names(df2)[names(df2) == "LONGUEUR"] <- "LONGUEUR_sd"
names(df3)[names(df3) == "LONGUEUR"] <- "LONGUEUR_max"
names(df4)[names(df4) == "LONGUEUR"] <- "LONGUEUR_min"

df <- left_join(df, df1, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))
df <- left_join(df, df2, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))
df <- left_join(df, df3, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))
df <- left_join(df, df4, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))
df_mut_sv <- left_join(df_mut_sv, df, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))
remove(df, df1, df2, df3, df4)

#nb de positions différentes concernées par generation par echantillon
table_sv$POSITION_factor <- as.factor(table_sv$POSITION)
nb_positions_gen_ech <- table_sv %>% aggregate(POSITION_factor ~ GENERATION + ECHANTILLON, FUN = function(x) length(unique(x)))
names(nb_positions_gen_ech)[names(nb_positions_gen_ech) == "POSITION_factor"] <- "nb_pos_gen_ech"
df_mut_sv <- left_join(df_mut_sv, nb_positions_gen_ech, by = c("GENERATION", "ECHANTILLON")) 
remove(nb_positions_gen_ech)

#nb de positions différentes concernées par generation par echantillon par type de mutation
nb_positions_gen_ech_type_mut <- table_sv %>% aggregate(POSITION_factor ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = function(x) length(unique(x)))
names(nb_positions_gen_ech_type_mut)[names(nb_positions_gen_ech_type_mut) == "POSITION_factor"] <- "nb_pos_gen_ech_type_mut"
df_mut_sv <- left_join(df_mut_sv, nb_positions_gen_ech_type_mut, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION")) 
remove(nb_positions_gen_ech_type_mut)

df_mut_sv %>% names()
df_mut_sv <- df_mut_sv %>% relocate(traitement_type, .after = ECHANTILLON)
```

```{r}
df_mut_sv %>% names()
ggplot(data = df_mut_sv, aes(x = TYPE.DE.MUTATION, y = effectif_type_mutation, color=TYPE.DE.MUTATION)) +
  geom_boxplot(outlier.colour="black", outlier.shape=16,
             outlier.size=2, outlier.alpha = 0.5 ,notch=FALSE) +
  #geom_dotplot(binaxis='y', stackdir='center', dotsize=1) +
  geom_jitter(shape=16, position=position_jitterdodge(0.2), alpha = 0.5) +
  scale_color_brewer(palette="Dark2") +
  labs(x = "Type de mutation des VS\n (délétion ou insertion)", y = "Effectif des mutations", color = "DEL = délétion /\n INS = insértion") +
  facet_wrap(~GENERATION, scales = "free_y") + #, ncol = 5
  ggtitle("Distribution des boîtes à moustaches des délétions et\n des insértions de variants structuraux (VS) par génération") +
  theme_classic()+
  theme(plot.title = element_text(hjust = 0.5))

#Même graphe qu'au dessus mais avec geom_dotplot au lien de geom_jitter
ggplot(data = df_mut_sv, aes(x = TYPE.DE.MUTATION, y = effectif_type_mutation, color=TYPE.DE.MUTATION)) +
  geom_boxplot(outlier.colour="black", outlier.shape=16,
             outlier.size=2, outlier.alpha = 0.5 ,notch=FALSE) +
  geom_dotplot(aes(fill = TYPE.DE.MUTATION), binaxis='y', stackdir='center',position=position_dodge(), dotsize=1, alpha = 0.5, show.legend = FALSE) +
  scale_color_brewer(palette="Dark2") +
  scale_fill_brewer(palette="Dark2") +
  labs(x = "Type de mutation des VS\n (délétion ou insertion)", y = "Effectif des mutations", color = "DEL = délétion /\n INS = insértion") +
  facet_wrap(~GENERATION, scales = "free_y") + #, ncol = 5
  ggtitle("Distribution des boîtes à moustaches des délétions et\n des insértions de variants structuraux (VS) par génération") +
  theme_classic()+
  theme(plot.title = element_text(hjust = 0.5))

ggplot(data = df_mut_sv, aes(x = GENERATION, y = effectif_type_mutation, color=TYPE.DE.MUTATION)) +
  geom_boxplot(position=position_dodge(1), outlier.colour="black", outlier.shape=16,
             outlier.size=2, outlier.alpha = 0.5 ,notch=FALSE) +
  geom_dotplot(aes(fill = TYPE.DE.MUTATION), binaxis='y', stackdir='center', position=position_dodge(), alpha = 0.5, dotsize = 0.5, show.legend = FALSE) +
  #geom_jitter(shape=16, position=position_jitter(), alpha = 0.5) +
  scale_color_brewer(palette="Dark2") +
  scale_fill_brewer(palette="Dark2") + 
  labs(x = "Génération", y = "Effectif des types de mutations (délétions ou insertions)", color = "DEL = délétion /\n INS = insértion") +
  ggtitle("Distribution des boîtes à moustaches des délétions et\n des insértions de variants structuraux  par génération") +
  theme_bw()+
  theme(plot.title = element_text(hjust = 0.5))
```


(j'essaye de trouver la meilleure manière de représenter visuellement la distribution statistique des insertions et des délétions)

```{r}

ggplot(data = df_mut_sv, aes(x = GENERATION, y = effectif_type_mutation, color=traitement_type, by = traitement_type)) +
  geom_boxplot(position=position_dodge(1),  outlier.colour="black", outlier.shape=16, outlier.size=2, outlier.alpha = 0.9 , notch=FALSE,width = 0.5) +
  geom_dotplot(aes(fill = TYPE.DE.MUTATION), binaxis='y', stackdir='center', position=position_dodge(1), alpha = 0.9, dotsize = 0.6, show.legend = TRUE) +
  #geom_jitter(aes(fill = traitement_type, shape = TYPE.DE.MUTATION) , position=position_jitterdodge(), alpha = 0.9) +
  #geom_point(aes(fill = TYPE.DE.MUTATION, shape = TYPE.DE.MUTATION), position=position_jitterdodge(dodge.width=0.5), alpha = 0.5) +
  scale_color_brewer(palette="Dark2") +
  scale_fill_manual(values = c("#990099", "#CC9900")) + 
  labs(x = "Génération", y = "Effectif des types de mutations (délétions ou insertions)", color = "Type de traitement") +
  ggtitle("Distribution des boîtes à moustaches des délétions et\n des insértions de variants structuraux  par type de traitement et par génération") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))

ggplot(data = df_mut_sv, aes(x = GENERATION, y = effectif_type_mutation, color=traitement_type)) +
  geom_boxplot(position=position_dodge(1), outlier.colour="black", outlier.shape=16,
             outlier.size=2, outlier.alpha = 0.5 ,notch=FALSE) +
  #geom_dotplot(aes(fill = TYPE.DE.MUTATION), binaxis='y', stackdir='center', position=position_dodge(), alpha = 0.5, dotsize = 0.5, show.legend = TRUE) +
  geom_jitter(aes(fill = traitement_type, shape = TYPE.DE.MUTATION), position=position_jitterdodge(), alpha = 0.9) +
  scale_color_brewer(palette="Dark2") +
  scale_fill_brewer(palette="Dark2") + 
  labs(x = "Génération", y = "Effectif des types de mutations\n(délétions ou insertions)", color = "Type de traitement") +
  ggtitle("Distribution des boîtes à moustaches des délétions et des\ninsértions de variants structuraux  par type de traitement et par génération") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))


#C'est la même chose qu'au dessus mais dans des boites pour les générations
ggplot(data = df_mut_sv, aes(x = traitement_type, y = effectif_type_mutation, color=traitement_type, by = traitement_type)) +
  geom_boxplot(position=position_dodge(1), outlier.colour="black", outlier.shape=16, outlier.size=2, outlier.alpha = 0.5 , notch=FALSE, width = 0.5) +
  geom_dotplot(aes(fill = TYPE.DE.MUTATION), binaxis='y', stackdir='center', position=position_dodge(), alpha = 0.8, dotsize = 1) +
  #geom_jitter(aes(fill = traitement_type, shape = TYPE.DE.MUTATION) , position=position_jitterdodge(), alpha = 0.8) +
  scale_color_brewer(palette="Dark2") +
  scale_fill_manual(values = c("#990099", "#CC9900")) + 
  facet_wrap(~GENERATION, scales = "free_y") +
  labs(x = "Type de traitement", y = "Effectif des types de mutations\n(délétions ou insertions)", color = "Type de traitement") +
  ggtitle("Distribution des boîtes à moustaches des délétions et des\ninsértions de variants structuraux  par type de traitement et par génération") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1)) 

ggplot(data = df_mut_sv, aes(x = traitement_type, y = effectif_type_mutation, color=traitement_type, by = traitement_type)) +
  geom_boxplot(position=position_dodge(1), outlier.colour="black", outlier.shape=16, outlier.size=2, outlier.alpha = 0.5 , notch=FALSE, width = 0.5) +
  #geom_dotplot(aes(fill = TYPE.DE.MUTATION, shape = TYPE.DE.MUTATION), binaxis='y', stackdir='center', position=position_dodge(), alpha = 0.5, dotsize = 0.3) +
  geom_jitter(aes(fill = traitement_type, shape = TYPE.DE.MUTATION) , position=position_jitterdodge(), alpha = 0.8) +
  scale_color_brewer(palette="Dark2") +
  facet_wrap(~GENERATION, scales = "free_y") +
  labs(x = "Type de traitement", y = "Effectif des types de mutations\n(délétions ou insertions)", color = "Type de traitement") +
  ggtitle("Distribution des boîtes à moustaches des délétions et des\ninsértions de variants structuraux  par type de traitement et par génération") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1)) 

##################################
plot_P90 <- df_mut_sv[which(df_mut_sv$GENERATION == "P90"), ] %>%
  ggplot( aes(x = traitement_type, y = effectif_type_mutation,  color=TYPE.DE.MUTATION,  by = TYPE.DE.MUTATION)) +
  geom_boxplot(position=position_dodge(1),  outlier.colour="black", outlier.shape=16, outlier.size=2, outlier.alpha = 0.5 ,  notch=FALSE, width = 0.5) +
  geom_dotplot(aes(fill = TYPE.DE.MUTATION), binaxis='y', stackdir='center', position=position_dodge(1), alpha = 0.8, dotsize = 0.7, show.legend = FALSE) +
  scale_color_brewer(palette="Dark2") +
  scale_fill_brewer(palette="Dark2") +
  labs(x = "type de traitement") +
  ggtitle("P90") +
  theme_bw() + 
  theme(axis.title.y = element_blank(), legend.position = "none")

plot_P65 <- df_mut_sv[which(df_mut_sv$GENERATION == "P65"), ] %>%
  ggplot( aes(x = traitement_type, y = effectif_type_mutation,  color=TYPE.DE.MUTATION,  by = TYPE.DE.MUTATION)) +
  geom_boxplot(position=position_dodge(1),  outlier.colour="black", outlier.shape=16, outlier.size=2, outlier.alpha = 0.5 ,  notch=FALSE, width = 0.5) +
  geom_dotplot(aes(fill = TYPE.DE.MUTATION), binaxis='y', stackdir='center', position=position_dodge(1), alpha = 0.8, dotsize = 0.7, show.legend = FALSE) +
  scale_color_brewer(palette="Dark2") +
  scale_fill_brewer(palette="Dark2") +
  labs(x = "type de traitement", color = "Type de mutation\n(INS = insertion, DEL = délétion)") +
  ggtitle("P65") +
  theme_bw() +
  theme(axis.title.y = element_blank())

plot_P50 <- df_mut_sv[which(df_mut_sv$GENERATION == "P50"), ] %>%
  ggplot( aes(x = traitement_type, y = effectif_type_mutation,  color=TYPE.DE.MUTATION,  by = TYPE.DE.MUTATION)) +
  geom_boxplot(position=position_dodge(1),  outlier.colour="black", outlier.shape=16, outlier.size=2, outlier.alpha = 0.5 ,  notch=FALSE, width = 0.5) +
  geom_dotplot(aes(fill = TYPE.DE.MUTATION), binaxis='y', stackdir='center', position=position_dodge(1), alpha = 0.8, dotsize = 0.7, show.legend = FALSE) +
  scale_color_brewer(palette="Dark2") +
  scale_fill_brewer(palette="Dark2") +
  labs( y = "effectif des type de mutations") +
  ggtitle("P50") +
  theme_bw() + 
  theme(axis.title.x = element_blank(), legend.position = "none")

plot_P30 <- df_mut_sv[which(df_mut_sv$GENERATION == "P30"), ] %>%
  ggplot( aes(x = traitement_type, y = effectif_type_mutation,  color=TYPE.DE.MUTATION,  by = TYPE.DE.MUTATION)) +
  geom_boxplot(position=position_dodge(1),  outlier.colour="black", outlier.shape=16, outlier.size=2, outlier.alpha = 0.5 ,  notch=FALSE, width = 0.5) +
  geom_dotplot(aes(fill = TYPE.DE.MUTATION), binaxis='y', stackdir='center', position=position_dodge(1), alpha = 0.8, dotsize = 0.7, show.legend = FALSE) +
  scale_color_brewer(palette="Dark2") +
  scale_fill_brewer(palette="Dark2") +
  ggtitle("P30") +
  theme_bw() + 
  theme(legend.position = "none", axis.title =  element_blank() )


plot_P15 <-df_mut_sv[which(df_mut_sv$GENERATION == "P15"), ] %>%
  ggplot( aes(x = traitement_type, y = effectif_type_mutation,  color=TYPE.DE.MUTATION,  by = TYPE.DE.MUTATION)) +
  geom_boxplot(position=position_dodge(1),  outlier.colour="black", outlier.shape=16, outlier.size=2, outlier.alpha = 0.5 ,  notch=FALSE, width = 0.5) +
  geom_dotplot(aes(fill = TYPE.DE.MUTATION), binaxis='y', stackdir='center', position=position_dodge(1), alpha = 0.8, dotsize = 0.7, show.legend = FALSE) +
  scale_color_brewer(palette="Dark2") +
  scale_fill_brewer(palette="Dark2") +
  ggtitle("P15") +
  theme_bw() + 
  theme(axis.title = element_blank(), legend.position = "none")

plot_P15 
plot_P30
plot_P50
plot_P65
plot_P90
```


```{r, fig.height=10, fig.width=12}
library(patchwork)
plot_P <- plot_P15 + plot_P30 + plot_P50 + plot_P65 + plot_P90 + plot_annotation(title = "Distribution des statistiques des insertions et des délétions\ndes variants structuraux en fonction des traitements et par Génération") + plot_layout(widths = c(2, 3)) 
plot_P

ggsave(plot_P, "boxplot_ins_del_vs_traitement_generation.pdf", width = 12, height = 10)
```





```{r}
#Effectif des mutations délétions et insertions confondues en fonction des traitement et des générations
df_mut_sv[,c("GENERATION", "traitement_type", "ECHANTILLON", "effectif_mutation")] %>% unique() %>%
  ggplot( aes(x = GENERATION, 
                        y = effectif_mutation, 
                        color=traitement_type, 
                        by = traitement_type)) +
  geom_boxplot(position=position_dodge(1), 
               outlier.colour="black", 
               outlier.shape=16,
               outlier.size=2, 
               outlier.alpha = 0.5 ,
               notch=FALSE,
               width = 0.5) +
  #geom_jitter(aes(fill = traitement_type) , position=position_jitterdodge(), alpha = 0.9) +
  geom_dotplot(aes(fill = traitement_type), binaxis='y', stackdir='center', position=position_dodge(), alpha = 0.9, dotsize = 0.7) +
  scale_color_brewer(palette="Dark2") +
  scale_fill_brewer(palette="Dark2") +
  labs(x = "Génération", y = "Effectif des mutations", color = "Type de traitement") +
   ggtitle("Distribution des boîtes à moustaches des mutations de variants structuraux\n(délétions et des insértions confondues)   par type de traitement et par génération") +
  theme_bw()
  theme(plot.title = element_text(hjust = 0.5))

#Effectif des mutations délétions et insertions confondues en fonction des traitement et des générations
#df_mut_sv[,c("GENERATION", "traitement_type", "ECHANTILLON", "effectif_mutation")] %>% unique() %>%
#  ggplot( aes(x = GENERATION, 
#                        y = effectif_mutation, 
#                        color=traitement_type, 
#                        by = traitement_type)) +
#  geom_boxplot(position=position_dodge(1), 
#               outlier.colour="black", 
#               outlier.shape=16,
#               outlier.size=2, 
#               outlier.alpha = 0.5 ,
#               notch=FALSE,
#               width = 0.5) +
#  geom_jitter(aes(fill = traitement_type) , position=position_jitterdodge(), alpha = 0.9) +
#  scale_color_brewer(palette="Dark2") +
#  scale_fill_brewer(palette="Dark2") +
#  labs(x = "Génération", y = "Effectif des mutations", color = "Type de traitement") +
#   ggtitle("Distribution des boîtes à moustaches des mutations de variants structuraux\n(délétions et des insértions confondues)   par type de traitement et par génération") +
#  theme_bw()
#  theme(plot.title = element_text(hjust = 0.5))
  
#le rendu est meilleur avec dotplot plutôt qu'avec geom_jitter
  
df_mut_sv[,c("GENERATION", "traitement_type", "ECHANTILLON", "effectif_mutation")] %>% unique() %>%
  ggplot(aes(x = GENERATION,
           y = effectif_mutation,
           by = traitement_type,
           fill = traitement_type)) +
  geom_bar(position=position_dodge(), width=0.5, stat = "identity")+
  scale_fill_brewer(palette="Dark2") +
  labs(x = "Génération", y = "Effectif des mutations", fill = "Type de traitement") +
   ggtitle("Distribution des mutations de variants structuraux\n(délétions et des insértions confondues)   par type de traitement et par génération") +
  theme_bw()
```


```{r}
table_sv[,c("GENERATION", "traitement_type", "TYPE.DE.MUTATION")] %>%
  ggplot(aes(x = traitement_type,
           by = TYPE.DE.MUTATION,
           fill = TYPE.DE.MUTATION)) +
  geom_bar(position=position_dodge(), width=0.5, stat = "count")+
  scale_fill_brewer(palette="Dark2") +
  facet_wrap(~GENERATION, scale = "free") +
  labs(x = "Effectif des mutations", y = "traitement", fill = "Type de mutation\n(DEL = délétion\nINS = insertion)") +
  ggtitle("Distribution des types mutations (délétion et insertion)\nde variants structuraux par traitement et par génération") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1)) 

#Ce deuxième graphe ne marche pas trop, je voulais représenter la proportion des types de mutations... mais ça me donne la proportion des types de mutations dans les échantillons...
ggplot(df_mut_sv, aes(x = traitement_type, y = freq_mutation_type, by = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) +
  geom_bar(stat = "identity", position = "fill", width= 0.8, color = "black") +
  facet_wrap(~GENERATION, scale = "free") +
  #geom_text(aes(label = pourcent_eff), stat = "identity",  position = position_fill(.5), size = 2.5, color = "black") +  #facultatif sinon on ne voit rien
  scale_fill_brewer(palette="Dark2") +
  geom_text(aes(label = freq_mutation_type), stat = "identity",  position = position_fill(.5), size = 2, color = "black") +  
    theme_bw()
```




```{r}
#Là j'ai voulu représenter les statistiques de changement de fréquences de mutations en fonction des generation, des traitement et de si c'est des délétions ou des insertion mais c'est nul

#df_mut_sv[,c("GENERATION", "traitement_type", "ECHANTILLON", "effectif_mutation")] %>% unique() %>%
  ggplot(df_mut_sv, aes(x = traitement_type, 
                        y = freq_mutation_type, 
                        color=TYPE.DE.MUTATION, 
                        by = TYPE.DE.MUTATION)) +
  geom_boxplot(position=position_dodge(1), 
               outlier.colour="black", 
               outlier.shape=16,
               outlier.size=2, 
               outlier.alpha = 0.5 ,
               notch=FALSE,
               width = 0.5) +
  geom_jitter(aes(fill = traitement_type) , position=position_jitterdodge(), alpha = 0.9) +
  facet_wrap(~GENERATION, scale = "free") +  
  scale_color_brewer(palette="Dark2") +
  labs(x = "Génération", y = "mutations") +
  theme_bw()
```


Regarder la distribution en termes de % d’effectifs de mutations

Regarder la longueur des mutations en fonction de si c'est del ou ins et en fonction du traitement et des génération
```{r}
table_sv[which(table_sv$GENERATION == "P15"),c("traitement_type", "TYPE.DE.MUTATION", "LONGUEUR")] %>%
  ggplot(aes(x = traitement_type,
             y = abs(LONGUEUR),
           by = TYPE.DE.MUTATION,
           fill = TYPE.DE.MUTATION)) +
  geom_boxplot(position=position_dodge(1)) + 
  #geom_dotplot(aes(fill = TYPE.DE.MUTATION), binaxis='y', stackdir='center', position=position_dodge(1), alpha = 0.8, dotsize = 0.7) + #show.legend = FALSE
  scale_color_brewer(palette="Dark2") +
  scale_fill_brewer(palette="Dark2") +
  scale_y_log10() +
  #scale_y_continuous(expand = expansion(mult = c(0.05, 0.05))) +
  ggtitle("P15") +
  theme_bw() #+ 
  #theme(axis.title = element_blank(), legend.position = "none")


```


Je veux représenter la distribution des longueurs de mutations en fonction de leur type, de la génération et du traitement

```{r}
table_sv %>% names()

table_sv <- table_sv %>% mutate(LONGUEUR_abs = round(abs(LONGUEUR),3))
df_length_mut_sv <- table_sv %>% aggregate(LONGUEUR_abs ~ GENERATION + TYPE.DE.MUTATION + traitement_type, FUN = mean)
df2 <- table_sv %>% aggregate(LONGUEUR_abs ~ GENERATION + TYPE.DE.MUTATION + traitement_type, FUN = median)
df3 <- table_sv %>% aggregate(LONGUEUR_abs ~ GENERATION + TYPE.DE.MUTATION + traitement_type, FUN = sd)

names(df_length_mut_sv)[names(df_length_mut_sv) == "LONGUEUR_abs"] <- "LONGUEUR_abs_mean"
names(df2)[names(df2) == "LONGUEUR_abs"] <- "LONGUEUR_abs_median"
names(df3)[names(df3) == "LONGUEUR_abs"] <- "LONGUEUR_abs_sd"

df_length_mut_sv <- left_join(df_length_mut_sv, df2)
df_length_mut_sv <- left_join(df_length_mut_sv, df3)  
remove(df2, df3)

df_length_mut_sv <- df_length_mut_sv %>% mutate(LONGUEUR_abs_mean = round(LONGUEUR_abs_mean,3))
df_length_mut_sv <- df_length_mut_sv %>% mutate(LONGUEUR_abs_sd = round(LONGUEUR_abs_sd,3))
```


Palettes de couleurs R : 
https://bookdown.org/hneth/ds4psy/D.3-apx-colors-basics.html
https://derekogle.com/NCGraphing/resources/colors
```{r color palette}
c25 <- c( "dodgerblue2", "#E31A1C", "green4", "#6A3D9A", "#FF7F00", "black", "gold1", "skyblue2", "#FB9A99",  "palegreen2", "#CAB2D6", "#FDBF6F", "gray70", "khaki2", "maroon", "orchid1", "deeppink1", "blue1", "steelblue4","darkturquoise", "green1", "yellow4", "yellow3","darkorange4", "brown", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", 'black','forestgreen', 'red2', 'orange', 'cornflowerblue',  'magenta', 'darkolivegreen4', 'indianred1', 'tan4', 'darkblue', 'mediumorchid1','firebrick4',  'yellowgreen', 'lightsalmon', 'tan3', "tan1",'darkgray', 'wheat4', '#DDAD4B', 'chartreuse','seagreen1', 'moccasin', 'mediumvioletred', 'seagreen','cadetblue1',"darkolivegreen1" ,"tan2" ,   "tomato3" , "#7CE3D8","gainsboro")

library(Polychrome)
library(pals)
# install.packages("rcartocolor")
# install.packages("remotes")
library(rcartocolor)
pal.bands(alphabet, alphabet2, cols25, glasbey, kelly, polychrome, 
  stepped, tol, watlington,
  show.names=FALSE)
library(wesanderson)
#carto_pal

scales::show_col(carto_pal(12, "Safe"))
              

```


```{r}

table_sv$LONGUEUR_abs %>% summary()
table_sv$LONGUEUR_abs %>% length() #698
table_sv[which(table_sv$LONGUEUR_abs <= 100) , ] %>% nrow #662

table_sv[which(table_sv$LONGUEUR_abs > 100) , ] %>% nrow() #36
table_sv[which(table_sv$LONGUEUR_abs > 100) , "LONGUEUR_abs"] %>% sort()

#Distribution de la longueur des mutations
table_sv[which(table_sv$LONGUEUR_abs <= 250) , ] %>% 
  ggplot(aes(x = LONGUEUR_abs)) +
  geom_histogram(binwidth=1, fill = "aquamarine3", color = "aquamarine4") +
  geom_vline(aes(xintercept=mean(LONGUEUR_abs)), color="blue", linetype="dashed", size=1) +
  #geom_text(aes(label = LONGUEUR_abs), stat = "count", vjust = -0.7 , size = 2, color = "black") +
  #scale_y_log10() +
  #scale_x_log10() +
  theme_bw()

# J'ai colorié en fonction de si c'est une délétion ou un insertion
table_sv[which(table_sv$LONGUEUR_abs <= 250) , ] %>% 
  ggplot(aes(x = LONGUEUR_abs, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=1, alpha=0.5, position="dodge") +
  scale_color_brewer(palette="Accent") + 
   scale_fill_brewer(palette="Accent") + 
  #geom_vline(aes(xintercept=mean(LONGUEUR_abs)), color="blue", linetype="dashed", size=1) +
  #scale_color_manual(values= wes_palette("Royal2", n = 2)) +
  theme_bw()

# toutes les mutations confondues mais on prend en compte la génération
table_sv[which(table_sv$LONGUEUR_abs <= 250) , ] %>%
  ggplot(aes(x = LONGUEUR_abs)) +
  geom_histogram(binwidth=1, fill = "aquamarine3", color = "aquamarine4") +
  facet_wrap(~GENERATION, scales = "free") +
  theme_bw()

#Là c'est la distribution des longueurs de mutations en fonction des générations et j'ai colorié les insertions et les délétions
table_sv[which(table_sv$LONGUEUR_abs <= 250) , ] %>% 
  ggplot(aes(x = LONGUEUR_abs, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=1, alpha=0.5, position="dodge") +
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  facet_wrap(~GENERATION, scales = "free") +
  ggtitle("longueurs de mutations inférieures à 250 pb") +
  theme_bw()

table_sv[which(table_sv$LONGUEUR_abs >= 250) , ] %>% 
  ggplot(aes(x = LONGUEUR_abs, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=1, alpha=0.5, position="dodge") +
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  facet_wrap(~GENERATION, scales = "free") +
  ggtitle("longueurs de mutations supérieures à 250 pb") +
  theme_bw()

# les distributions de longueurs de mutations en fonction des traitements
table_sv[which(table_sv$LONGUEUR_abs <= 250) , ] %>% 
  ggplot(aes(x = LONGUEUR_abs, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=1, alpha=0.5, position="dodge") +
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  facet_wrap(~traitement_type, scales = "free") +
  theme_bw()

#distribution des longueurs de mutation en fonction de leur type (insertion ou délétion)et par traitement
table_sv[which(table_sv$LONGUEUR_abs <= 250 & table_sv$GENERATION == "P15") , ] %>% 
  ggplot(aes(x = LONGUEUR_abs, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=2, alpha=0.5, position="dodge") +
  geom_vline(data=df_length_mut_sv[which(df_length_mut_sv$GENERATION == "P15"),], aes(xintercept=LONGUEUR_abs_mean, color= TYPE.DE.MUTATION), linetype="dashed", size = 1)+
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  ggtitle("P15") + 
  #facet_wrap(~traitement_type, scales = "free") +
  theme_bw()

table_sv[which(table_sv$LONGUEUR_abs <= 250 & table_sv$GENERATION == "P30") , ] %>% 
  ggplot(aes(x = LONGUEUR_abs, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=2, alpha=0.5, position="dodge") +
  geom_vline(data=df_length_mut_sv[which(df_length_mut_sv$GENERATION == "P30"),], aes(xintercept=LONGUEUR_abs_mean, color= TYPE.DE.MUTATION), linetype="dashed", size = 1)+
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  ggtitle("P30") + 
  facet_wrap(~traitement_type, scales = "free") +
  theme_bw()


table_sv[which(table_sv$LONGUEUR_abs <= 250 & table_sv$GENERATION == "P50") , ] %>% 
  ggplot(aes(x = LONGUEUR_abs, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=2, alpha=0.5, position="dodge") +
  geom_vline(data=df_length_mut_sv[which(df_length_mut_sv$GENERATION == "P50"),], aes(xintercept=LONGUEUR_abs_mean, color= TYPE.DE.MUTATION), linetype="dashed", size = 1)+
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  ggtitle("P50") + 
  facet_wrap(~traitement_type, scales = "free") +
  theme_bw()

table_sv[which(table_sv$LONGUEUR_abs <= 250 & table_sv$GENERATION == "P65") , ] %>% 
  ggplot(aes(x = LONGUEUR_abs, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=2, alpha=0.5, position="dodge") +
  geom_vline(data=df_length_mut_sv[which(df_length_mut_sv$GENERATION == "P65"),], aes(xintercept=LONGUEUR_abs_mean, color= TYPE.DE.MUTATION), linetype="dashed", size = 1)+
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  ggtitle("P65") + 
  facet_wrap(~traitement_type, scales = "free") +
  theme_bw()

table_sv[which(table_sv$LONGUEUR_abs <= 250 & table_sv$GENERATION == "P90") , ] %>% 
  ggplot(aes(x = LONGUEUR_abs, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=2, alpha=0.5, position="dodge") +
  geom_vline(data=df_length_mut_sv[which(df_length_mut_sv$GENERATION == "P90"),], aes(xintercept=LONGUEUR_abs_mean, color= TYPE.DE.MUTATION), linetype="dashed", size = 1)+
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  ggtitle("P90") + 
  facet_wrap(~traitement_type, scales = "free") +
  theme_bw()
```

Il y a des générations où les longueurs de mutations sont de plus de 1000 paires de bases 
Je vais faire deux sous tableaux : un qui aura la moyenne des longueurs de sv <250 pb et un autre qui aura la moyenne des longueurs de sv > 250 (en fait je vais pas faire le deuxième parce que c'est pas utile, il y en a 12 en tout...)
```{r}
# Zoom sur les mutations de longueurs inférieures à 250 pb
df_length_sv_in_250 <- table_sv[which(table_sv$LONGUEUR_abs < 250),] %>% 
  aggregate(LONGUEUR_abs ~ GENERATION + TYPE.DE.MUTATION + traitement_type, FUN = mean)
df2 <- table_sv[which(table_sv$LONGUEUR_abs < 250),] %>% 
  aggregate(LONGUEUR_abs ~ GENERATION + TYPE.DE.MUTATION + traitement_type, FUN = median)
df3 <- table_sv[which(table_sv$LONGUEUR_abs < 250),] %>% 
  aggregate(LONGUEUR_abs ~ GENERATION + TYPE.DE.MUTATION + traitement_type, FUN = sd)

names(df_length_sv_in_250)[names(df_length_sv_in_250) == "LONGUEUR_abs"] <- "LONGUEUR_abs_mean"
names(df2)[names(df2) == "LONGUEUR_abs"] <- "LONGUEUR_abs_median"
names(df3)[names(df3) == "LONGUEUR_abs"] <- "LONGUEUR_abs_sd"

df_length_sv_in_250 <- left_join(df_length_sv_in_250, df2)
df_length_sv_in_250 <- left_join(df_length_sv_in_250, df3)  
remove(df2, df3)

df_length_sv_in_250 <- df_length_sv_in_250 %>% mutate(LONGUEUR_abs_mean = round(LONGUEUR_abs_mean,3))
df_length_sv_in_250 <- df_length_sv_in_250 %>% mutate(LONGUEUR_abs_sd = round(LONGUEUR_abs_sd,3))


```

```{r}
#distribution des longueurs de mutation en fonction de leur type (insertion ou délétion)et par traitement
table_sv[which(table_sv$LONGUEUR_abs <= 250 & table_sv$GENERATION == "P15") , ] %>% 
  ggplot(aes(x = LONGUEUR_abs, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=2, alpha=0.5, position="dodge") +
  geom_vline(data=df_length_sv_in_250[which(df_length_sv_in_250$GENERATION == "P15"),], aes(xintercept=LONGUEUR_abs_mean, color= TYPE.DE.MUTATION), linetype="dashed", size = 1)+
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  ggtitle("P15") + 
  #facet_wrap(~traitement_type, scales = "free") +
  theme_bw()

table_sv[which(table_sv$LONGUEUR_abs <= 250 & table_sv$GENERATION == "P30") , ] %>% 
  ggplot(aes(x = LONGUEUR_abs, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=2, alpha=0.5, position="dodge") +
  geom_vline(data=df_length_sv_in_250[which(df_length_sv_in_250$GENERATION == "P30"),], aes(xintercept=LONGUEUR_abs_mean, color= TYPE.DE.MUTATION), linetype="dashed", size = 1)+
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  ggtitle("P30") + 
  facet_wrap(~traitement_type, scales = "free") +
  theme_bw()


table_sv[which(table_sv$LONGUEUR_abs <= 250 & table_sv$GENERATION == "P50") , ] %>% 
  ggplot(aes(x = LONGUEUR_abs, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=2, alpha=0.5, position="dodge") +
  geom_vline(data=df_length_sv_in_250[which(df_length_sv_in_250$GENERATION == "P50"),], aes(xintercept=LONGUEUR_abs_mean, color= TYPE.DE.MUTATION), linetype="dashed", size = 1)+
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  ggtitle("P50") + 
  facet_wrap(~traitement_type, scales = "free") +
  theme_bw()

table_sv[which(table_sv$LONGUEUR_abs <= 250 & table_sv$GENERATION == "P65") , ] %>% 
  ggplot(aes(x = LONGUEUR_abs, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=2, alpha=0.5, position="dodge") +
  geom_vline(data=df_length_sv_in_250[which(df_length_sv_in_250$GENERATION == "P65"),], aes(xintercept=LONGUEUR_abs_mean, color= TYPE.DE.MUTATION), linetype="dashed", size = 1)+
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  ggtitle("P65") + 
  facet_wrap(~traitement_type, scales = "free") +
  theme_bw()

table_sv[which(table_sv$LONGUEUR_abs <= 250 & table_sv$GENERATION == "P90") , ] %>% 
  ggplot(aes(x = LONGUEUR_abs, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=2, alpha=0.5, position="dodge") +
  geom_vline(data=df_length_sv_in_250[which(df_length_sv_in_250$GENERATION == "P90"),], aes(xintercept=LONGUEUR_abs_mean, color= TYPE.DE.MUTATION), linetype="dashed", size = 1)+
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  ggtitle("P90") + 
  facet_wrap(~traitement_type, scales = "free") +
  theme_bw()
```

Les distributions des longueurs de mutations sont super proches quand on zoom sur des longueurs inférieures à 250 pb, les moyennes sont assez proches (en sachant que là c'est la distribution des longueurs par génération tout échantillon confondus...)
Si je regarde la distribution des moyennes des échantillons : 
```{r}
# Zoom sur les mutations de longueurs inférieures à 250 pb
df_length_sv_2 <- table_sv %>% 
  aggregate(LONGUEUR_abs ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION + traitement_type, FUN = mean)
df2 <- table_sv %>% 
  aggregate(LONGUEUR_abs ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION + traitement_type, FUN = median)
df3 <- table_sv %>% 
  aggregate(LONGUEUR_abs ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION + traitement_type, FUN = sd)

names(df_length_sv_2)[names(df_length_sv_2) == "LONGUEUR_abs"] <- "LONGUEUR_abs_mean"
names(df2)[names(df2) == "LONGUEUR_abs"] <- "LONGUEUR_abs_median"
names(df3)[names(df3) == "LONGUEUR_abs"] <- "LONGUEUR_abs_sd"

df_length_sv_2 <- left_join(df_length_sv_2, df2)
df_length_sv_2 <- left_join(df_length_sv_2, df3)  
remove(df2, df3)

df_length_sv_2 <- df_length_sv_2 %>% mutate(LONGUEUR_abs_mean = round(LONGUEUR_abs_mean,3))
df_length_sv_2 <- df_length_sv_2 %>% mutate(LONGUEUR_abs_sd = round(LONGUEUR_abs_sd,3))

##############
df_length_sv_2$LONGUEUR_abs_mean %>% summary()
df_length_sv_2[which(df_length_sv_2$LONGUEUR_abs_mean >=250),] %>% nrow() #14/71

#Distribution de la longueur des mutations
df_length_sv_2 %>% 
  ggplot(aes(x = LONGUEUR_abs_mean)) +
  geom_histogram(binwidth=1, fill = "aquamarine3", color = "aquamarine4") +
  geom_vline(aes(xintercept=mean(LONGUEUR_abs_mean)), color="blue", linetype="dashed", size=1) +
  theme_bw()

df_length_sv_2 %>% 
  ggplot(aes(x = LONGUEUR_abs_median)) +
  geom_histogram(binwidth=1, fill = "aquamarine3", color = "aquamarine4") +
  geom_vline(aes(xintercept=mean(LONGUEUR_abs_mean)), color="blue", linetype="dashed", size=1) +
  theme_bw()

# J'ai colorié en fonction de si c'est une délétion ou un insertion
df_length_sv_2 %>% 
  ggplot(aes(x = LONGUEUR_abs_mean, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=1, alpha=0.5, position="dodge") +
  scale_color_brewer(palette="Accent") + 
   scale_fill_brewer(palette="Accent") + 
  theme_bw()

# toutes les mutations confondues mais on prend en compte la génération
df_length_sv_2 %>%
  ggplot(aes(x = LONGUEUR_abs_mean)) +
  geom_histogram(binwidth=1, fill = "aquamarine3", color = "aquamarine4") +
  facet_wrap(~GENERATION, scales = "free") +
  theme_bw()

#Là c'est la distribution des longueurs de mutations en fonction des générations et j'ai colorié les insertions et les délétions
df_length_sv_2 %>% 
  ggplot(aes(x = LONGUEUR_abs_mean, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=1, alpha=0.5, position="dodge") +
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  facet_wrap(~GENERATION, scales = "free") +
  theme_bw()

# les distributions de longueurs de mutations en fonction des traitements
df_length_sv_2 %>% 
  ggplot(aes(x = LONGUEUR_abs_mean, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=1, alpha=0.5, position="dodge") +
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  facet_wrap(~traitement_type, scales = "free") +
  theme_bw()

#distribution des longueurs de mutation en fonction de leur type (insertion ou délétion)et par traitement
df_length_sv_2[which(df_length_sv_2$GENERATION == "P15") , ] %>% 
  ggplot(aes(x = LONGUEUR_abs_mean, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=2, alpha=0.5, position="dodge") +
  #geom_vline(data=df_length_mut_sv[which(df_length_mut_sv$GENERATION == "P15"),], aes(xintercept=LONGUEUR_abs_mean, color= TYPE.DE.MUTATION), linetype="dashed", size = 1)+
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  ggtitle("P15") + 
  #facet_wrap(~traitement_type, scales = "free") +
  theme_bw()

df_length_sv_2[which(df_length_sv_2$GENERATION == "P30") , ] %>% 
  ggplot(aes(x = LONGUEUR_abs_mean, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=2, alpha=0.5, position="dodge") +
  #geom_vline(data=df_length_mut_sv[which(df_length_mut_sv$GENERATION == "P30"),], aes(xintercept=LONGUEUR_abs_mean_mean, color= TYPE.DE.MUTATION), linetype="dashed", size = 1)+
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  ggtitle("P30") + 
  facet_wrap(~traitement_type, scales = "free") +
  theme_bw()


df_length_sv_2[which(df_length_sv_2$GENERATION == "P50") , ] %>% 
  ggplot(aes(x = LONGUEUR_abs_mean, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=2, alpha=0.5, position="dodge") +
  #geom_vline(data=df_length_mut_sv[which(df_length_mut_sv$GENERATION == "P50"),], aes(xintercept=LONGUEUR_abs_mean_mean, color= TYPE.DE.MUTATION), linetype="dashed", size = 1)+
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  ggtitle("P50") + 
  facet_wrap(~traitement_type, scales = "free") +
  theme_bw()

df_length_sv_2[which(df_length_sv_2$GENERATION == "P65") , ] %>% 
  ggplot(aes(x = LONGUEUR_abs_mean, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=2, alpha=0.5, position="dodge") +
  #geom_vline(data=df_length_mut_sv[which(df_length_mut_sv$GENERATION == "P65"),], aes(xintercept=LONGUEUR_abs_mean_mean, color= TYPE.DE.MUTATION), linetype="dashed", size = 1)+
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  ggtitle("P65") + 
  facet_wrap(~traitement_type, scales = "free") +
  theme_bw()

df_length_sv_2[which(df_length_sv_2$GENERATION == "P90") , ] %>% 
  ggplot(aes(x = LONGUEUR_abs_mean, color = TYPE.DE.MUTATION, fill = TYPE.DE.MUTATION)) + #
  geom_histogram(binwidth=2, alpha=0.5, position="dodge") +
  #geom_vline(data=df_length_mut_sv[which(df_length_mut_sv$GENERATION == "P90"),], aes(xintercept=LONGUEUR_abs_mean_mean, color= TYPE.DE.MUTATION), linetype="dashed", size = 1)+
  scale_color_brewer(palette="Accent") + 
  scale_fill_brewer(palette="Accent") + 
  ggtitle("P90") + 
  facet_wrap(~traitement_type, scales = "free") +
  theme_bw()
```


```{r}





```


```{r}
df_length_mut_sv[which(df_length_mut_sv$GENERATION == "P15"), ] %>%
ggplot( aes(x = TYPE.DE.MUTATION, y = LONGUEUR_abs_mean, fill = TYPE.DE.MUTATION)) +
  geom_bar(position = position_dodge(), width=0.5, stat = "identity") +
  geom_text(aes(label = LONGUEUR_abs_mean), stat = "identity", vjust = -1 , size = 2, color = "black")+
  scale_fill_brewer(palette="Dark2") +
  geom_errorbar(aes(ymin= LONGUEUR_abs_mean - LONGUEUR_abs_sd, ymax=LONGUEUR_abs_mean + LONGUEUR_abs_sd), width=.2, position = position_dodge()) +
  scale_y_log10() +
  ggtitle("P15") +
  theme_bw()
```


```{r}
#df_length_mut_sv <- df_length_mut_sv %>% mutate(LONGUEUR_abs = round(abs(LONGUEUR),3))
df_length_mut_sv[which(df_length_mut_sv$GENERATION == "P15"),] %>%
ggplot( aes(x = TYPE.DE.MUTATION, y = LONGUEUR_abs_mean, fill = TYPE.DE.MUTATION)) +
  geom_bar(position = position_dodge(), width=0.5, stat = "identity") +
  geom_text(aes(label = LONGUEUR_abs_mean), stat = "identity", vjust = -1 , size = 2, color = "black")+
  scale_fill_brewer(palette="Dark2") +
  geom_errorbar(aes(ymin= LONGUEUR_abs_mean - LONGUEUR_abs_sd, ymax=LONGUEUR_abs_mean + LONGUEUR_abs_sd), width=.2, position = position_dodge()) +
  scale_y_log10() +
  ggtitle("P15") +
  theme_bw()

df_length_mut_sv[which(df_length_mut_sv$GENERATION == "P30"),] %>%
ggplot( aes(x = TYPE.DE.MUTATION, y = LONGUEUR_abs_mean, fill = TYPE.DE.MUTATION)) +
  geom_bar(position = position_dodge(), width=0.5, stat = "identity") +
  geom_text(aes(label = LONGUEUR_abs_mean), stat = "identity", vjust = -1 , size = 2, color = "black")+
  scale_fill_brewer(palette="Dark2") +
  geom_errorbar(aes(ymin= LONGUEUR_abs_mean - LONGUEUR_abs_sd, ymax=LONGUEUR_abs_mean + LONGUEUR_abs_sd), width=.2, position = position_dodge()) +
  scale_y_log10() +
  facet_wrap(~traitement_type, scale = "free") +
  ggtitle("P30") +
  theme_bw() 

df_length_mut_sv[which(df_length_mut_sv$GENERATION == "P50"),] %>%
ggplot( aes(x = TYPE.DE.MUTATION, y = LONGUEUR_abs_mean, fill = TYPE.DE.MUTATION)) +
  geom_bar(position = position_dodge(), width=0.5, stat = "identity") +
  geom_text(aes(label = LONGUEUR_abs_mean), stat = "identity", vjust = -1 , size = 2, color = "black")+
  scale_fill_brewer(palette="Dark2") +
  geom_errorbar(aes(ymin= LONGUEUR_abs_mean - LONGUEUR_abs_sd, ymax=LONGUEUR_abs_mean + LONGUEUR_abs_sd), width=.2, position = position_dodge()) +
  scale_y_log10() +
  facet_wrap(~traitement_type, scale = "free") +
  ggtitle("P50") +
  theme_bw() 

df_length_mut_sv[which(df_length_mut_sv$GENERATION == "P65"),] %>%
ggplot( aes(x = TYPE.DE.MUTATION, y = LONGUEUR_abs_mean, fill = TYPE.DE.MUTATION)) +
  geom_bar(position = position_dodge(), width=0.5, stat = "identity") +
  geom_text(aes(label = LONGUEUR_abs_mean), stat = "identity", vjust = -1 , size = 2, color = "black")+
  scale_fill_brewer(palette="Dark2") +
  geom_errorbar(aes(ymin= LONGUEUR_abs_mean - LONGUEUR_abs_sd, ymax=LONGUEUR_abs_mean + LONGUEUR_abs_sd), width=.2, position = position_dodge()) +
  scale_y_log10() +
  facet_wrap(~traitement_type, scale = "free") +
  ggtitle("P65") +
  theme_bw() 

df_length_mut_sv[which(df_length_mut_sv$GENERATION == "P90"),] %>%
ggplot( aes(x = TYPE.DE.MUTATION, y = LONGUEUR_abs_mean, fill = TYPE.DE.MUTATION)) +
  geom_bar(position = position_dodge(), width=0.5, stat = "identity") +
  geom_text(aes(label = LONGUEUR_abs_mean), stat = "identity", vjust = -1 , size = 2, color = "black")+
  scale_fill_brewer(palette="Dark2") +
  geom_errorbar(aes(ymin= LONGUEUR_abs_mean - LONGUEUR_abs_sd, ymax=LONGUEUR_abs_mean + LONGUEUR_abs_sd), width=.2, position = position_dodge()) +
  scale_y_log10() +
  facet_wrap(~traitement_type, scale = "free") +
  ggtitle("P90") +
  theme_bw() 
```


```{r}




table_sv[,c("GENERATION", "traitement_type", "TYPE.DE.MUTATION")] %>%
  ggplot(aes(x = traitement_type,
           by = TYPE.DE.MUTATION,
           fill = TYPE.DE.MUTATION)) +
  geom_bar(position=position_stack(), width=0.5, stat = "count")+
  scale_fill_brewer(palette="Dark2") +
  facet_wrap(~GENERATION, scale = "free") +
  labs(x = "Effectif des mutations", y = "traitement", fill = "Type de mutation\n(DEL = délétion\nINS = insertion)") +
  ggtitle("Distribution des types mutations (délétion et insertion)\nde variants structuraux par traitement et par génération") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1)) 


table_sv[which(table_sv$GENERATION == "P15"),c("traitement_type", "TYPE.DE.MUTATION", "LONGUEUR")] %>%
  ggplot(aes(y = abs(LONGUEUR),
           fill = TYPE.DE.MUTATION)) +
  geom_bar(width=0.5, stat = "count")+
  scale_fill_brewer(palette="Dark2") +
  #facet_wrap(~GENERATION, scale = "free") +
  labs(x = "traitement", y = "longueur absolue", fill = "Type de mutation\n(DEL = délétion\nINS = insertion)") +
  ggtitle("Distribution des types mutations (délétion et insertion)\nde variants structuraux par traitement et par génération") +
  facet_wrap(~TYPE.DE.MUTATION) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1))

```


```{r}
group_by(GENERATION, ECHANTILLON, TYPE.DE.MUTATION) %>%
  count()
  #pivot_wider(names_from = TYPE.DE.MUTATION)


names(df_mut_sv)[names(df_mut_sv) == "n"] <- "effectif_type_mutation"

df_mut_sv <- left_join(df_mut_sv, unique(table_sv[,c("GENERATION", "ECHANTILLON", "traitement_type")]), by = c("ECHANTILLON", "GENERATION")) 



df_mut_sv2 <- df_mut_sv %>% aggregate(effectif_type_mutation ~ GENERATION + ECHANTILLON, FUN = sum)
names(df_mut_sv2)[names(df_mut_sv2) == "effectif_type_mutation"] <- "effectif_mutation"
df_mut_sv <- left_join(df_mut_sv, df_mut_sv2, by = c("GENERATION", "ECHANTILLON"))
remove(df_mut_sv2)
df_mut_sv <- df_mut_sv %>% mutate(freq_mutation_type = effectif_type_mutation/effectif_mutation)
df_mut_sv$freq_mutation_type <- round(df_mut_sv$freq_mutation_type, 3)

#frequence allélique par type de mutation
table_sv %>% names()
df <- table_sv %>% aggregate(FREQUENCE.ALL ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = mean)
df1 <- table_sv %>% aggregate(FREQUENCE.ALL ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = median)
df2 <- table_sv %>% aggregate(FREQUENCE.ALL ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = sd)
df3 <- table_sv %>% aggregate(FREQUENCE.ALL ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = max)
df4 <- table_sv %>% aggregate(FREQUENCE.ALL ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = min)

names(df)[names(df) == "FREQUENCE.ALL"] <- "FREQUENCE.ALL_mean"
names(df1)[names(df1) == "FREQUENCE.ALL"] <- "FREQUENCE.ALL_median"
names(df2)[names(df2) == "FREQUENCE.ALL"] <- "FREQUENCE.ALL_sd"
names(df3)[names(df3) == "FREQUENCE.ALL"] <- "FREQUENCE.ALL_max"
names(df4)[names(df4) == "FREQUENCE.ALL"] <- "FREQUENCE.ALL_min"

df <- left_join(df, df1, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))
df <- left_join(df, df2, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))
df <- left_join(df, df3, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))
df <- left_join(df, df4, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))
df_mut_sv <- left_join(df_mut_sv, df, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))

remove(df, df1, df2, df3, df4)
#longueur du type de mutation par generation et échantillon
table_sv %>% names()
df <- table_sv %>% aggregate(LONGUEUR ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = mean)
df1 <- table_sv %>% aggregate(LONGUEUR ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = median)
df2 <- table_sv %>% aggregate(LONGUEUR ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = sd)
df3 <- table_sv %>% aggregate(LONGUEUR ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = max)
df4 <- table_sv %>% aggregate(LONGUEUR ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = min)

names(df)[names(df) == "LONGUEUR"] <- "LONGUEUR_mean"
names(df1)[names(df1) == "LONGUEUR"] <- "LONGUEUR_median"
names(df2)[names(df2) == "LONGUEUR"] <- "LONGUEUR_sd"
names(df3)[names(df3) == "LONGUEUR"] <- "LONGUEUR_max"
names(df4)[names(df4) == "LONGUEUR"] <- "LONGUEUR_min"

df <- left_join(df, df1, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))
df <- left_join(df, df2, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))
df <- left_join(df, df3, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))
df <- left_join(df, df4, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))
df_mut_sv <- left_join(df_mut_sv, df, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION"))
remove(df, df1, df2, df3, df4)

#nb de positions différentes concernées par generation par echantillon
table_sv$POSITION_factor <- as.factor(table_sv$POSITION)
nb_positions_gen_ech <- table_sv %>% aggregate(POSITION_factor ~ GENERATION + ECHANTILLON, FUN = function(x) length(unique(x)))
names(nb_positions_gen_ech)[names(nb_positions_gen_ech) == "POSITION_factor"] <- "nb_pos_gen_ech"
df_mut_sv <- left_join(df_mut_sv, nb_positions_gen_ech, by = c("GENERATION", "ECHANTILLON")) 
remove(nb_positions_gen_ech)

#nb de positions différentes concernées par generation par echantillon par type de mutation
nb_positions_gen_ech_type_mut <- table_sv %>% aggregate(POSITION_factor ~ GENERATION + ECHANTILLON + TYPE.DE.MUTATION, FUN = function(x) length(unique(x)))
names(nb_positions_gen_ech_type_mut)[names(nb_positions_gen_ech_type_mut) == "POSITION_factor"] <- "nb_pos_gen_ech_type_mut"
df_mut_sv <- left_join(df_mut_sv, nb_positions_gen_ech_type_mut, by = c("GENERATION", "ECHANTILLON", "TYPE.DE.MUTATION")) 
remove(nb_positions_gen_ech_type_mut)

df_mut_sv %>% names()
df_mut_sv <- df_mut_sv %>% relocate(traitement_type, .after = ECHANTILLON)
```



Regarder la distribution moyenne des mutations le long du génome par génération et par traitement
```{r}
table_genome_ann_CyHV3 <- read.csv("annotation_genes_CyHV3_genbank.csv", header = TRUE, sep = "\t")
table_genome_ann_CyHV3 %>% names()
table_genome_ann_CyHV3 <- mutate(table_genome_ann_CyHV3, gen_length = End-Begin)
table_genome_ann_CyHV3 <- table_genome_ann_CyHV3 %>% relocate (gen_length, .after = End)
table_genome_ann_CyHV3$gen_length %>% summary()
table_genome_ann_CyHV3$Gene.Type %>% unique() #protein-coding

#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#    267    1018    1969    2694    3205   30495 
```


```{r}
table_sv <- table_sv %>% mutate(mutation = 1)
df_P15_sv <- table_sv[which(table_sv$GENERATION == "P15"), ]

ggplot(df_P15_sv, aes(x = POSITION, fill = TYPE.DE.MUTATION)) +
  geom_histogram(binwidth = 100, position = "identity", alpha = 0.6) +
  scale_fill_brewer(palette="Dark2") +
  labs(title = "Distribution des mutations dans le génome par génération",
       x = "Position dans le génome",
       y = "Nombre de mutations",
       fill = "Type de mutation") +
  facet_wrap(~ECHANTILLON, scales = "free") +
  theme_minimal()

ggplot(df_P15_sv, aes(x = POSITION, fill = as.factor(TYPE.DE.MUTATION))) +
  geom_density(alpha = 0.5) +
  scale_fill_brewer(palette="Dark2") +
  labs(title = "Densité des mutations par position et génération",
       x = "Position dans le génome",
       y = "Densité",
       fill = "Génération") +
  facet_wrap(~ECHANTILLON, scales = "free") +
  theme_minimal()
```



















regarder les positions du génome les plus touchées par les mutations 
```{r}
table_sv <- table_sv[order(table_sv$POSITION),] 
#regarder le nombre de mutations par positions 

# Génome : 295100 pb
genome_ref <- c(1: 295100)
gen_ref <- as.data.frame(genome_ref)

names(gen_ref)[names(gen_ref) == "genome_ref"] <- "POSITION"
genome_ref_group <- seq(1, 295100 + 200, 200)
genome_ref_group %>% length() #numeric 1476
gen_ref$POSITION_group_index <- cut(gen_ref$POSITION, breaks = genome_ref_group, labels = FALSE, include.lowest = TRUE)
gen_ref$POSITION_group <- genome_ref_group[gen_ref$POSITION_group_index]
gen_ref[which(is.na(gen_ref$POSITION_group_index)== TRUE),]
gen_ref$POSITION_grp_interval <- paste0("(", genome_ref_group[gen_ref$POSITION_group_index], "-", 
                                  genome_ref_group[gen_ref$POSITION_group_index + 1], "]")


table_sv <- table_sv %>% mutate(mutation = 1)

table_sv_gen_ref <- left_join(gen_ref, table_sv, by = "POSITION")
table_sv_gen_ref[which(is.na(table_sv_gen_ref$mutation) == TRUE),"mutation"] <- 0

table_sv_gen_ref %>% names()




#table_distrib_mut_genome
df_P15_sv <- table_sv_gen_ref[which(table_sv_gen_ref$)] %>% aggregate(mutation ~ GENERATION + POSITION_group_index + POSITION_group + POSITION_grp_interval + ECHANTILLON + traitement_type, FUN = sum, na.rm = TRUE)


df1 <- df1[order(df1$POSITION_group_index),]
df2 <- table_sv_gen_ref %>% aggregate(mutation ~ POSITION_group_index + POSITION_group + POSITION_grp_interval, FUN = sum)
df2 <- df2[order(df2$POSITION_group_index),]
```


```{r}
#Rechercher le nombre de mutation moyen par génération par position
table_distrib_mut_genome <- table_sv_gen_ref %>% group_by(POSITION_group_index, POSITION_group, POSITION_grp_interval, GENERATION, ECHANTILLON, traitement_type) %>% count()
table_distrib_mut_genome$n %>% summary()


table_distrib_mut_genome %>% names()
df <- table_distrib_mut_genome %>% aggregate(n ~ GENERATION + POSITION_group_index + POSITION_group + POSITION_grp_interval, FUN =  mean)
df1 <- table_distrib_mut_genome %>% aggregate(n ~ GENERATION + POSITION_group_index + POSITION_group + POSITION_grp_interval, FUN =  median)
names(df)[names(df) == "n"] <- "mean_mutation"
names(df1)[names(df1) == "n"] <- "median_mutation"
df <- left_join(df, df1)
table_distrib_mut_genome <- left_join(table_distrib_mut_genome, df)
remove(df, df1)




table_sv$POSITION %>% class()
table_sv$POSITION %>% min() #1210
table_sv$POSITION %>% max() #284052
genome_ref_group[which(genome_ref_group >=min(table_sv$POSITION))] %>% min()#1401 #%>% length
genome_ref_group[which(genome_ref_group<=min(table_sv$POSITION))] %>% max()#1201
#1210 sera dans la catégorie 1201-1401
genome_ref_group[which(genome_ref_group>=max(table_sv$POSITION))] %>% min() #284101
genome_ref_group[which(genome_ref_group<=max(table_sv$POSITION))] %>% max() #284001


#284052
groupe <- seq(1201, 284101 +200, by = 200)
table_sv$POSITION_group_index <- cut(table_sv$POSITION, breaks = groupe, labels = FALSE, include.lowest = TRUE)
table_sv$POSITION_group <- groupe[table_sv$POSITION_group_index]
# Génération des étiquettes manuelles
table_sv$POSITION_grp_interval <- paste0("(", groupe[table_sv$POSITION_group_index], "-", 
                                  groupe[table_sv$POSITION_group_index + 1], "]")

table_sv[which(is.na(table_sv$POSITION_group_index)== TRUE),] %>% nrow() #0

table_sv %>% names()
table_distrib_mut_genome <- table_sv %>% group_by(POSITION_group_index, POSITION_group, POSITION_grp_interval, GENERATION, ECHANTILLON, traitement_type) %>% count()
table_distrib_mut_genome$n %>% summary()


######
table_distrib_mut_genome %>% names()
df <- table_distrib_mut_genome %>% aggregate(n ~ GENERATION + POSITION_group_index + POSITION_group + POSITION_grp_interval, FUN =  mean)
df1 <- table_distrib_mut_genome %>% aggregate(n ~ GENERATION + POSITION_group_index + POSITION_group + POSITION_grp_interval, FUN =  median)
names(df)[names(df) == "n"] <- "mean_mutation"
names(df1)[names(df1) == "n"] <- "median_mutation"
df <- left_join(df, df1)
table_distrib_mut_genome <- left_join(table_distrib_mut_genome, df)
remove(df, df1)


table_distrib_mut_genome %>% names()
gen_ref %>% names()

df <- left_join(gen_ref, table_distrib_mut_genome, by = c(POSITION))
##############
table_sv$POSITION_group %>% class()
table_sv$POSITION_group <- as.numeric(table_sv$POSITION_group)

#table_sv$POSITION_group <- format(table_sv$POSITION_group, scientific=F)
which(names(table_sv) == "POSITION_group")
table_sv <- table_sv[,-c(11,12,13)]
ggplot(table_sv, aes(x = POSITION_group))



table_sv %>% names()
table_sv$POSITION %>% summary()


table_sv[,c("POSITION", "POSITION_FACTOR", "")]
df_mut_sv2 <- left_join()

gq_data$GenotypeQuality_group <- cut(gq_data$GQ,
                                  breaks = seq(1, 47, by = 1),   # Définir les breaks comme souhaité
                                  labels = c( "1-2",  "2-3",  "3-4",  "4-5",  "5-6",  "6-7",  "7-8",  "8-9",  "9-10", "10-11", "11-12", "12-13", "13-14", "14-15", "15-16", "16-17", "17-18", "18-19", "19-20", "20-21", "21-22", "22-23", "23-24", "24-25", "25-26", "26-27", "27-28", "28-29", "29-30", "30-31", "31-32", "32-33", "33-34", "34-35", "35-36", "36-37", "37-38", "38-39", "39-40", "40-41", "41-42", "42-43", "43-44", "44-45", "45-46", "46-47"), right = FALSE)
```


