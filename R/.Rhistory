df1 %>% names()
df1 <- F_colonne(df1, col1 = df1$Name.x , col2 = df1$Name.y , name_col1 = "Name.x" , name_col2 = "Name.y", new_col = Name, name_new_col = "Name")
df1 <- F_colonne(df1, col1 = df1$rpt_type.x , col2 = df1$rpt_type.y , name_col1 = "rpt_type.x" , name_col2 = "rpt_type.y", new_col = rpt_type, name_new_col = "rpt_type")
df1 <- F_colonne(df1, col1 = df1$locus_tag.x , col2 = df1$locus_tag.y , name_col1 = "locus_tag.x" , name_col2 = "locus_tag.y", new_col = locus_tag, name_new_col = "locus_tag")
df1 <- df1[,-which(names(df1) == "NA")]
df2 <- pivot_wider(df[,c("TRUE_ID", "V5_1", "V5_2")], names_from ="V5_1", values_from = "V5_2")
df1 <- left_join(df1, df2, by = "TRUE_ID")
df1 %>% names()
df1 <- F_colonne(df1, col1 = df1$Note.x , col2 = df1$Note.y , name_col1 = "Note.x" , name_col2 = "Note.y", new_col = Note, name_new_col = "Note")
df1 <- F_colonne(df1, col1 = df1$locus_tag.x , col2 = df1$locus_tag.y , name_col1 = "locus_tag.x" , name_col2 = "locus_tag.y", new_col = locus_tag, name_new_col = "locus_tag")
df1 <- F_colonne(df1, col1 = df1$gbkey.x , col2 = df1$gbkey.y , name_col1 = "gbkey.x" , name_col2 = "gbkey.y", new_col = gbkey, name_new_col = "gbkey")
df1 <- df1[,-which(names(df1) == "NA")]
df2 <- pivot_wider(df[,c("TRUE_ID", "V6_1", "V6_2")], names_from ="V6_1", values_from = "V6_2")
df1 <- left_join(df1, df2, by = "TRUE_ID")
df1 %>% names()
df1 <- F_colonne(df1, col1 = df1$locus_tag.x , col2 = df1$locus_tag.y , name_col1 = "locus_tag.x" , name_col2 = "locus_tag.y", new_col = locus_tag, name_new_col = "locus_tag")
df1 <- F_colonne(df1, col1 = df1$gbkey.x , col2 = df1$gbkey.y , name_col1 = "gbkey.x" , name_col2 = "gbkey.y", new_col = gbkey, name_new_col = "gbkey")
df1 <- df1[,-which(names(df1) == "NA")]
df2 <- pivot_wider(df[,c("TRUE_ID", "V7_1", "V7_2")], names_from ="V7_1", values_from = "V7_2")
df1 <- left_join(df1, df2, by = "TRUE_ID")
df1 %>% names()
df1 <- F_colonne(df1, col1 = df1$locus_tag.x , col2 = df1$locus_tag.y , name_col1 = "locus_tag.x" , name_col2 = "locus_tag.y", new_col = locus_tag, name_new_col = "locus_tag")
df1 <- df1[,-which(names(df1) == "NA")]
df2 <- pivot_wider(df[,c("TRUE_ID", "V8_1", "V8_2")], names_from ="V8_1", values_from = "V8_2")
df1 <- left_join(df1, df2, by = "TRUE_ID")
df1 %>% names()
df1 <- F_colonne(df1, col1 = df1$product.x , col2 = df1$product.y , name_col1 = "product.x" , name_col2 = "product.y", new_col = product, name_new_col = "product")
df1 <- df1[,-which(names(df1) == "NA")]
df2 <- pivot_wider(df[,c("TRUE_ID", "V9_1", "V9_2")], names_from ="V9_1", values_from = "V9_2")
df1 <- left_join(df1, df2, by = "TRUE_ID")
df1 %>% names()
df1 <- F_colonne(df1, col1 = df1$protein_id.x , col2 = df1$protein_id.y , name_col1 = "protein_id.x" , name_col2 = "protein_id.y", new_col = protein_id, name_new_col = "protein_id")
df1 <- df1[,-which(names(df1) == "NA")]
df2 <- pivot_wider(df[,c("TRUE_ID", "V10_1", "V10_2")], names_from ="V10_1", values_from = "V10_2")
df1 <- left_join(df1, df2, by = "TRUE_ID")
df1 %>% names()
df1 <- df1[,-which(names(df1) == "NA")]
df2 <- pivot_wider(df[,c("TRUE_ID", "V11_1", "V11_2")], names_from ="V11_1", values_from = "V11_2")
df1 <- left_join(df1, df2, by = "TRUE_ID")
df1 %>% names()
df1 <- df1[,-which(names(df1) == "NA")]
CDS_genbank_2 <- left_join(df[,c(1:10)], df1, by = "TRUE_ID")
remove(df, df1, df2, CDS_genbank)
sapply(CDS_genbank_2, FUN = function(x) length(unique(x)))
sapply(CDS_genbank_2[,c(1:3, 6:8, 11:15, 17:28)], FUN = unique)
CDS_genbank_2[,c("Region","gbkey", "TRUE_ID","Parent", "locus_tag")]
df_CDS <- CDS_genbank_2[which(CDS_genbank_2$gbkey == "CDS"),]
sapply(df_CDS, FUN = function(x) sum(is.na(x)))
#sapply(df_CDS, FUN = function(x) which(sum(is.na(x)) == 176))
df_CDS <- df_CDS %>% select(-c("acronym", "collection-date", "gene_biotype", "rpt_type", "country", "isolation-source", "mol_type", "nat-host", "note", "strain"))
sapply(df_CDS, FUN = function(x) length(unique(x)))
sapply(df_CDS[,c(1:3,6,8,15)], FUN = unique)
#Il y a plusieurs cadres de lectures de sequences codantes -> duplications... (chevauchantes)
df_CDS <- df_CDS[,-c(1:2,6,8,15)]
names(df_CDS)[names(df_CDS) == "TRUE_ID"] <- "CDS_TRUE_ID"
names(df_CDS)[names(df_CDS) == "Region"] <- "CDS_Region"
names(df_CDS)[names(df_CDS) == "Begin"] <- "CDS_Begin"
names(df_CDS)[names(df_CDS) == "End"] <- "CDS_End"
names(df_CDS)[names(df_CDS) == "Orientation"] <- "CDS_Orientation"
names(df_CDS)[names(df_CDS) == "ID"] <- "CDS_ID"
names(df_CDS)[names(df_CDS) == "Name"] <- "CDS_Name"
names(df_CDS)[names(df_CDS) == "Parent"] <- "CDS_Parent"
names(df_CDS)[names(df_CDS) == "locus_tag"] <- "Locus.tag"
names(df_CDS)[names(df_CDS) == "Dbxref"] <- "CDS_Dbxref"
names(df_CDS)[names(df_CDS) == "Note"] <- "CDS_Note"
names(df_CDS)[names(df_CDS) == "product"] <- "CDS_product"
names(df_CDS)[names(df_CDS) == "protein_id"] <- "CDS_protein_id"
df_CDS <- df_CDS %>% relocate(CDS_TRUE_ID, .before = CDS_Region)
df_CDS <- df_CDS %>% mutate(CDS_Orientation = case_when(df_CDS$CDS_Orientation == "+" ~ "plus",
df_CDS$CDS_Orientation == "-" ~ "minus"))
df_CDS_pb <- data.frame()
for(i in df_CDS$CDS_TRUE_ID){ # i prend chaque nom de CDS
begin <- df_CDS[which(df_CDS$CDS_TRUE_ID == i),"CDS_Begin"] #Begin prend la valeur de position de début de CDS
end <- df_CDS[which(df_CDS$CDS_TRUE_ID == i),"CDS_End"] #End, la valeur de fin
CDS_POS <- c(begin:end) #création d'un vecteur pb qui va du début à la fin de CDS (ses paires de bases)
df <- data.frame(i, CDS_POS) # on en fait un df qui associe une paire de base du CDS
names(df)[1] <- "CDS_TRUE_ID" #modif du nom de la colonne
df_CDS_pb <- rbind(df_CDS_pb, df) # on empile les df au fur et à mesure que ça boucle
}
remove(df)
df <- df_CDS_pb %>% aggregate(.~CDS_TRUE_ID, FUN = length)
names(df)[2] <- "CDS_length"
df$CDS_length %% 3
df <- df %>% mutate(CDS_modulo_3 = df$CDS_length %% 3) #permet de savoir si c'est un multiple de 3
df_CDS_pb <- left_join(df_CDS_pb, df, by = c("CDS_TRUE_ID"))
remove(df)
df_CDS_pb <- left_join(df_CDS_pb, df_CDS, by = "CDS_TRUE_ID")
df_CDS_pb <- df_CDS_pb %>% mutate(POS_factor = as.factor(df_CDS_pb$CDS_POS)) %>% relocate(POS_factor, .after = CDS_POS)
write.csv(CDS_genbank_2, ".\\fichiers_utilises\\CDS_genbank_2.csv")
library(tidyverse)
library(dplyr)
library(Biostrings)
library(ape)
library(stringr)
setwd("E:\\github\\BILL_2025\\R")
df_CyHV3_genbank <- read.csv(".\\fichiers_utilises\\annotation_genes_CyHV3_genbank.csv" , header = TRUE, sep = "\t",  na ="NA", stringsAsFactors = FALSE)
df_CDS_genbank_2 <- read.csv(".\\fichiers_utilises\\CDS_genbank_2.csv" , header = FALSE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
df_snp <- read.csv(".\\fichiers_utilises\\snp.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
df_sv <- read.csv(".\\fichiers_utilises\\sv.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
df_sv_with_ORF <- read.csv(".\\fichiers_utilises\\sv_with_ORF.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
table_sn_with_ORF <- read.csv(".\\fichiers_utilises\\sp_with_ORF.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
View(df_CDS_genbank_2)
df_CDS_genbank_2 <- read.csv(".\\fichiers_utilises\\CDS_genbank_2.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
df_CDS_genbank_2 <- read.csv(".\\fichiers_utilises\\CDS_genbank_2.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE, row.names = FALSE)
df_CDS_genbank_2 <- read.csv(".\\fichiers_utilises\\CDS_genbank_2.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
View(df_CyHV3_genbank)
View(df_snp)
View(df_sv)
View(df_sv_with_ORF)
remove(table_sn_with_ORF)
df_snp_with_ORF <- read.csv(".\\fichiers_utilises\\sp_with_ORF.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
View(df_snp_with_ORF)
CyHV3_ref<-read.dna(".\\fichiers_utilises\\sequence_reference.fasta", format="fasta", as.character=TRUE)
for (i in 1:ncol(CyHV3_ref)) {
CyHV3_ref[,i] <- str_to_upper(CyHV3_ref[,i]) # comme les nucléotides sont ecris en minuscules, je les met en majuscule
}
CyHV3_ref[,c(1:50)] #montrer les 50 premières colonnes de la matrice
CyHV3_ref[,c(1:50)] #pareil mais pour le dataframe
CyHV3_ref <- as.data.frame(CyHV3_ref, header = TRUE) # transformation de la matrice en df
colnames(CyHV3_ref) <- gsub("^V", "", colnames(CyHV3_ref)) # modification du nom des colonnes
CyHV3_ref %>% ncol() #normalement il doit y avoir autant de colonnes que de paires de bases dans le génomes
CyHV3_ref <- CyHV3_ref %>% pivot_longer(cols = c(1:295146)) #la ligne devient colonne et les colonnes deviennent les lignes
CyHV3_ref$value %>% unique() #il y a bien que A, C, G, T comme valeur
#modification du nom des colonnes
names(CyHV3_ref)[1] <- "POS"
names(CyHV3_ref)[2] <- "REF_plus"
CyHV3_ref <- CyHV3_ref %>% dplyr::mutate(REF_moins = case_when(CyHV3_ref$REF_plus == "A" ~ "T" ,
CyHV3_ref$REF_plus == "T" ~ "A",
CyHV3_ref$REF_plus == "G" ~ "C",
CyHV3_ref$REF_plus == "C" ~ "G"))
library(tidyverse)
library(dplyr)
library(Biostrings)
library(ape)
library(stringr)
setwd("E:\\github\\BILL_2025\\R")
df_CyHV3_genbank <- read.csv(".\\fichiers_utilises\\annotation_genes_CyHV3_genbank.csv" , header = TRUE, sep = "\t",  na ="NA", stringsAsFactors = FALSE)
df_CDS_genbank_2 <- read.csv(".\\fichiers_utilises\\CDS_genbank_2.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
#df_snp <- read.csv(".\\fichiers_utilises\\snp.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
#df_sv <- read.csv(".\\fichiers_utilises\\sv.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
df_sv_with_ORF <- read.csv(".\\fichiers_utilises\\sv_with_ORF.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
df_snp_with_ORF <- read.csv(".\\fichiers_utilises\\sp_with_ORF.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
CyHV3_ref<-read.dna(".\\fichiers_utilises\\sequence_reference.fasta", format="fasta", as.character=TRUE)
for (i in 1:ncol(CyHV3_ref)) {
CyHV3_ref[,i] <- str_to_upper(CyHV3_ref[,i]) # comme les nucléotides sont ecris en minuscules, je les met en majuscule
}
CyHV3_ref[,c(1:50)] #montrer les 50 premières colonnes de la matrice
CyHV3_ref[,c(1:50)] #pareil mais pour le dataframe
CyHV3_ref <- as.data.frame(CyHV3_ref, header = TRUE) # transformation de la matrice en df
colnames(CyHV3_ref) <- gsub("^V", "", colnames(CyHV3_ref)) # modification du nom des colonnes
CyHV3_ref %>% ncol() #normalement il doit y avoir autant de colonnes que de paires de bases dans le génomes
CyHV3_ref <- CyHV3_ref %>% pivot_longer(cols = c(1:295146)) #la ligne devient colonne et les colonnes deviennent les lignes
CyHV3_ref$value %>% unique() #il y a bien que A, C, G, T comme valeur
#modification du nom des colonnes
names(CyHV3_ref)[1] <- "POS"
names(CyHV3_ref)[2] <- "REF_plus"
CyHV3_ref <- CyHV3_ref %>% dplyr::mutate(REF_moins = case_when(CyHV3_ref$REF_plus == "A" ~ "T" ,
CyHV3_ref$REF_plus == "T" ~ "A",
CyHV3_ref$REF_plus == "G" ~ "C",
CyHV3_ref$REF_plus == "C" ~ "G"))
View(df_snp_with_ORF)
View(df_CDS_genbank_2)
sapply(df_CDS_genbank_2, FUN = function(x) length(unique(x)))
df_CDS_genbank_2 %>% nrow()
sapply(df_CDS_genbank_2, FUN = function(x) length(unique(x)))
function(col, nom_1, nom_2){
for(i in col){ # i prend chaque nom d'ORF
begin <- df_CDS_genbank_2[which(col == i),"Begin"] #Begin prend la valeur de position de début de l'ORF
end <- df_CDS_genbank_2[which(col == i),"End"] #End, la valeur de fin
pb <- c(begin:end) #création d'un vecteur pb qui va du début à la fin de l'ORF (ses paires de bases)
df <- data.frame(i, pb) # on en fait un df qui associe une paire de base à l'ORF
names(df)[1] <- nom_1 #modif du nom de la colonne
names(df)[2] <- nom_2
table <- rbind(df_ORF_pb, df) # on empile les df au fur et à mesure que ça boucle
}
return(table)
}
sapply(df_CDS_genbank_2, FUN = function(x) length(unique(x)))
F_pos_gbkey <- function(col, nom_1, nom_2){
for(i in col){ # i prend chaque nom d'ORF
begin <- df_CDS_genbank_2[which(col == i),"Begin"] #Begin prend la valeur de position de début de l'ORF
end <- df_CDS_genbank_2[which(col == i),"End"] #End, la valeur de fin
pb <- c(begin:end) #création d'un vecteur pb qui va du début à la fin de l'ORF (ses paires de bases)
df <- data.frame(i, pb) # on en fait un df qui associe une paire de base à l'ORF
names(df)[1] <- nom_1 #modif du nom de la colonne
names(df)[2] <- nom_2
table <- rbind(df_ORF_pb, df) # on empile les df au fur et à mesure que ça boucle
}
return(table)
}
remove(i)
df_CDS_genbank_2$gbkey %>% unique()
df_CDS_genbank_2$Region %>% unique()
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "repeat_region"),] %>% nrow()
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "repeat_region"), c("Begin", "End")] %>% nrow()
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "repeat_region"), c("Begin", "End")] #%>% nrow()
df_CDS_genbank_2$gbkey %>% unique()
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "Src"), ] %>% nrow()
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "polyA_signal"), ] %>% nrow()
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "polyA_signal"), c("Begin", "End")]
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "Gene"), ] %>% nrow()
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "CDS"), ] %>% nrow()
# Je vais prendre en compte les queues polyA, les Genes et les CDS
df1 <- df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "polyA_signal"), ]
View(df1)
df1$TRUE_ID %>% unique() %>% length()
table_polyA <- F_pos_gbkey(table = table_polyA, col = df1$TRUE_ID, nom_1 = "polyA_signal", nom_2 = "POS")
table_polyA <- data.frame()
table_polyA <- F_pos_gbkey(table = table_polyA, col = df1$TRUE_ID, nom_1 = "polyA_signal", nom_2 = "POS")
# Je vais prendre en compte les queues polyA, les Genes et les CDS
df1 <- df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "Gene"), ]
df1$TRUE_ID %>% unique() %>% length()
# Je vais prendre en compte les queues polyA, les Genes et les CDS
df1 <- df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "CDS"), ]
df1$TRUE_ID %>% unique() %>% length()
F_pos_gbkey <- function(col, nom_1, nom_2, table, gbkey){
df <- df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == gbkey), ]
table<- data.frame()
for(i in col){ # i prend chaque nom d'ORF
begin <- df[which(col == i),"Begin"] #Begin prend la valeur de position de début de l'ORF
end <- df[which(col == i),"End"] #End, la valeur de fin
pb <- c(begin:end) #création d'un vecteur pb qui va du début à la fin de l'ORF (ses paires de bases)
df1 <- data.frame(i, pb) # on en fait un df qui associe une paire de base à l'ORF
names(df1)[1] <- nom_1 #modif du nom de la colonne
names(df1)[2] <- nom_2
table <- rbind(table, df1) # on empile les df au fur et à mesure que ça boucle
}
return(table)
}
# Je vais prendre en compte les queues polyA, les Genes et les CDS
table_polyA <- F_pos_gbkey(table = table_polyA, col = df1$TRUE_ID, nom_1 = "polyA_signal", nom_2 = "POS", gbkey = "polyA_signal" )
# Je vais prendre en compte les queues polyA, les Genes et les CDS
table_polyA <- F_pos_gbkey(table = table_polyA, col = df$TRUE_ID, nom_1 = "polyA_signal", nom_2 = "POS", gbkey = "polyA_signal" )
F_pos_gbkey <- function(col, nom_1, nom_2, table, gbkey){
df <- df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == gbkey), ]
table<- data.frame()
for(i in df$TRUE_ID){ # i prend chaque nom d'ORF
begin <- df[which(df$TRUE_ID == i),"Begin"] #Begin prend la valeur de position de début de l'ORF
end <- df[which(df$TRUE_ID == i),"End"] #End, la valeur de fin
pb <- c(begin:end) #création d'un vecteur pb qui va du début à la fin de l'ORF (ses paires de bases)
df1 <- data.frame(i, pb) # on en fait un df qui associe une paire de base à l'ORF
names(df1)[1] <- nom_1 #modif du nom de la colonne
names(df1)[2] <- nom_2
table <- rbind(table, df1) # on empile les df au fur et à mesure que ça boucle
}
return(table)
}
# Je vais prendre en compte les queues polyA, les Genes et les CDS
table_polyA <- F_pos_gbkey(table = table_polyA, col = df$TRUE_ID, nom_1 = "polyA_signal", nom_2 = "POS", gbkey = "polyA_signal" )
View(table_polyA)
# Je vais prendre en compte les queues polyA, les Genes et les CDS
table_polyA <- F_pos_gbkey(table = table_polyA, nom_1 = "polyA_signal", nom_2 = "POS", gbkey = "polyA_signal" )
table_ORF <- F_pos_gbkey(table = table_ORF, nom_1 = "ORF", nom_2 = "POS", gbkey = "Gene" )
View(table_ORF)
remove(df1)
#Certains ORF se chevauchent aussi
table_polyA <- F_pos_gbkey(table = table_CDS,  nom_1 = "CDS", nom_2 = "POS", gbkey = "CDS" )
# Je vais prendre en compte les queues polyA, les Genes et les CDS
table_polyA <- F_pos_gbkey(table = table_polyA, nom_1 = "polyA_signal", nom_2 = "POS", gbkey = "polyA_signal" )
#Certains ORF se chevauchent aussi
table_CDS <- F_pos_gbkey(table = table_CDS,  nom_1 = "CDS", nom_2 = "POS", gbkey = "CDS" )
View(CyHV3_ref)
CyHV3_ref$POS_factor <- as.factor(CyHV3_ref$POS)
CyHV3_ref <- CyHV3_ref %>% relocate(POS_factor, .after = POS)
View(CyHV3_ref)
CyHV3_ref_2 <- left_join(CyHV3_ref, table_polyA)
CyHV3_ref$POS <- as.numeric(CyHV3_ref$POS)
table_polyA$POS_factor <- as.factor(table_polyA$POS)
table_ORF$POS_factor <- as.factor(table_ORF$POS)
table_CDS$POS_factor <- as.factor(table_CDS$POS)
CyHV3_ref_2 <- left_join(CyHV3_ref, table_polyA)
View(CyHV3_ref_2)
CyHV3_ref_2 <- left_join(CyHV3_ref, table_ORF)
CyHV3_ref_2 <- left_join(CyHV3_ref, table_CDS)
CyHV3_ref_2 <- left_join(CyHV3_ref, table_polyA)
CyHV3_ref_2 <- left_join(CyHV3_ref_2, table_ORF)
CyHV3_ref_2 <- left_join(CyHV3_ref_2, table_CDS)
CyHV3_ref_2[which(is.na(CyHV3_ref_2$polyA_signal) == FALSE),]
CyHV3_ref_2[which(is.na(CyHV3_ref_2$ORF) == FALSE),]
remove(table_CDS, table_ORF, table_polyA)
df_snp_with_ORF$POS_factor <- as.factor(df_snp_with_ORF$POSITION)
df_sv_with_ORF$POS_factor <- as.factor(df_sv_with_ORF$POSITION)
names(df_snp_with_ORF)[1] <- Locus.tag
names(df_snp_with_ORF)[1] <- "Locus.tag"
names(df_sv_with_ORF)[1] <- "Locus.tag"
df_snp_with_ORF[,c("POS_factor", "Locus.tag", "TYPE", "GEN", "ECH")]
CyHV3_ref_2 <- left_join(CyHV3_ref_2, df_snp_with_ORF[,c("POS_factor", "Locus.tag", "TYPE", "GEN", "ECH")])
View(df_sv_with_ORF)
View(df_sv_with_ORF)
df_sv_with_ORF$LONGUEUR %>% unique()
df_sv_with_ORF <- df_sv_with_ORF %>%
mutate(End = case_when(df_sv_with_ORF$LONGUEUR <0 ~ (df_sv_with_ORF$POSITION - df_sv_with_ORF$LONGUEUR + 1),
df_sv_with_ORF$LONGUEUR > 0 ~ (df_sv_with_ORF$POSITION - df_sv_with_ORF$LONGUEUR - 1)
))
37879 + 74
df_sv_with_ORF<- df_sv_with_ORF[,-10]
df_sv_with_ORF <- df_sv_with_ORF %>%
mutate(End = case_when(df_sv_with_ORF$LONGUEUR <0 ~ (df_sv_with_ORF$POSITION - df_sv_with_ORF$LONGUEUR + 1),
df_sv_with_ORF$LONGUEUR > 0 ~ (df_sv_with_ORF$POSITION + df_sv_with_ORF$LONGUEUR - 1)
))
177568 - 48
df_sv_with_ORF <- df_sv_with_ORF %>%
mutate(End = case_when(df_sv_with_ORF$LONGUEUR <0 ~ (df_sv_with_ORF$POSITION + df_sv_with_ORF$LONGUEUR + 1),
df_sv_with_ORF$LONGUEUR > 0 ~ (df_sv_with_ORF$POSITION + df_sv_with_ORF$LONGUEUR - 1)
))
177568 -48
df_sv_with_ORF$Begin <- df_sv_with_ORF$POSITION
names(df_sv_with_ORF)[1] <- "locus.tag_sv"
View(CyHV3_ref)
View(CyHV3_ref_2)
names(df_sv_with_ORF)
test <- full_join(df_CDS_genbank_2[,c("Begin", "End", "ID", "TRUE_ID", "Name", "gbkey", "locus_tag")], df_sv_with_ORF[,c("locus.tag_sv", "Begin", "End", "TYPE.DE.MUTATION", "TYPE.DE.FICHIER", "GENERATION", "ECHANTILLON", "POS_factor")], by = c("Begin", "End"))
View(test)
test<- test[order(test$price,test$name ),]
test<- test[order(test$Begin,test$End ),]
#combien de mutation moyenne par ORF par génération
test <- df_sv_with_ORF %>% separate(locus.tag_sv, into = c("V", 1:6), remove = FALSE)
#combien de mutation moyenne par ORF par génération
test <- df_sv_with_ORF %>% separate(locus.tag_sv, into = c("V", 1:7), remove = FALSE)
#combien de mutation moyenne par ORF par génération
test <- df_sv_with_ORF %>% separate(locus.tag_sv, into = c("V", 1:8), remove = FALSE)
#combien de mutation moyenne par ORF par génération
test <- df_sv_with_ORF %>% separate(locus.tag_sv, into = c("V", 1:10), remove = FALSE)
#combien de mutation moyenne par ORF par génération
test <- df_sv_with_ORF %>% separate(locus.tag_sv, into = c("V", 1:20), remove = FALSE)
#combien de mutation moyenne par ORF par génération
test <- df_sv_with_ORF %>% separate(locus.tag_sv, into = c("V", 1:25), remove = FALSE)
#combien de mutation moyenne par ORF par génération
test <- df_sv_with_ORF %>% separate(locus.tag_sv, into = c("V", 1:50), remove = FALSE)
test$V12 %>% is.na() %>% sum()
test$V12
#combien de mutation moyenne par ORF par génération
test <- df_sv_with_ORF %>% separate(locus.tag_sv, into = past0("V", 1:50), remove = FALSE)
#combien de mutation moyenne par ORF par génération
test <- df_sv_with_ORF %>% separate(locus.tag_sv, into = paste0("V", 1:50), remove = FALSE)
test$V12 %>% is.na() %>% sum()
test$V20 %>% is.na() %>% sum()
test$V13 %>% is.na() %>% sum()
#combien de mutation moyenne par ORF par génération
test <- df_sv_with_ORF %>% separate(locus.tag_sv, into = paste0("V", 1:13), remove = FALSE)
test$V13 %>% is.na() %>% sum()
#combien de mutation moyenne par ORF par génération
test <- df_sv_with_ORF %>% separate(locus.tag_sv, into = paste0("V", 1:13), sep = "|", remove = FALSE)
test$V13 %>% is.na() %>% sum()
#combien de mutation moyenne par ORF par génération
test <- df_sv_with_ORF %>% separate(locus.tag_sv, into = paste0("V", 1:13), sep = "|", remove = FALSE, fill = "right")
#combien de mutation moyenne par ORF par génération
test <- df_sv_with_ORF %>% separate(locus.tag_sv, into = paste0("V", 1:13), remove = FALSE, fill = "right")
#combien de mutation moyenne par ORF par génération
test <- df_sv_with_ORF %>% separate(locus.tag_sv, into = paste0("V", 1:13), remove = FALSE, sep = " | ", fill = "right")
#combien de mutation moyenne par ORF par génération
test <- df_sv_with_ORF %>% separate(locus.tag_sv, into = paste0("V", 1:13), remove = FALSE, sep = "|", fill = "right")
#combien de mutation moyenne par ORF par génération
test <- df_sv_with_ORF %>% gsub(x = df_sv_with_ORF$locus.tag_sv, "|", " ")
View(df_sv_with_ORF)
#combien de mutation moyenne par ORF par génération
test <- df_sv_with_ORF %>% sub(x = df_sv_with_ORF$locus.tag_sv, "|", " ")
#combien de mutation moyenne par ORF par génération
test <- df_sv_with_ORF %>% sub(x = df_sv_with_ORF$locus.tag_sv, pattern = "|", replacement = " ")
sub(x = df_sv_with_ORF$locus.tag_sv, pattern = "|", replacement = " ")
gsub(x = df_sv_with_ORF$locus.tag_sv, pattern = "|", replacement = " ")
library(tidyverse)
library(dplyr)
library(Biostrings)
library(ape)
library(stringr)
setwd("E:\\github\\BILL_2025\\R")
df_CyHV3_genbank <- read.csv(".\\fichiers_utilises\\annotation_genes_CyHV3_genbank.csv" , header = TRUE, sep = "\t",  na ="NA", stringsAsFactors = FALSE)
df_CDS_genbank_2 <- read.csv(".\\fichiers_utilises\\CDS_genbank_2.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
#df_snp <- read.csv(".\\fichiers_utilises\\snp.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
#df_sv <- read.csv(".\\fichiers_utilises\\sv.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
df_sv_with_ORF <- read.csv(".\\fichiers_utilises\\sv_with_ORF.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
df_snp_with_ORF <- read.csv(".\\fichiers_utilises\\sp_with_ORF.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
CyHV3_ref<-read.dna(".\\fichiers_utilises\\sequence_reference.fasta", format="fasta", as.character=TRUE)
for (i in 1:ncol(CyHV3_ref)) {
CyHV3_ref[,i] <- str_to_upper(CyHV3_ref[,i]) # comme les nucléotides sont ecris en minuscules, je les met en majuscule
}
CyHV3_ref[,c(1:50)] #montrer les 50 premières colonnes de la matrice
CyHV3_ref[,c(1:50)] #pareil mais pour le dataframe
CyHV3_ref <- as.data.frame(CyHV3_ref, header = TRUE) # transformation de la matrice en df
colnames(CyHV3_ref) <- gsub("^V", "", colnames(CyHV3_ref)) # modification du nom des colonnes
CyHV3_ref %>% ncol() #normalement il doit y avoir autant de colonnes que de paires de bases dans le génomes
CyHV3_ref <- CyHV3_ref %>% pivot_longer(cols = c(1:295146)) #la ligne devient colonne et les colonnes deviennent les lignes
CyHV3_ref$value %>% unique() #il y a bien que A, C, G, T comme valeur
#modification du nom des colonnes
names(CyHV3_ref)[1] <- "POS"
names(CyHV3_ref)[2] <- "REF_plus"
CyHV3_ref <- CyHV3_ref %>% dplyr::mutate(REF_moins = case_when(CyHV3_ref$REF_plus == "A" ~ "T" ,
CyHV3_ref$REF_plus == "T" ~ "A",
CyHV3_ref$REF_plus == "G" ~ "C",
CyHV3_ref$REF_plus == "C" ~ "G"))
df_CDS_genbank_2 %>% nrow()
sapply(df_CDS_genbank_2, FUN = function(x) length(unique(x)))
df_CDS_genbank_2$gbkey %>% unique()
df_CDS_genbank_2$Region %>% unique()
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "repeat_region"), ] %>% nrow() #6
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "repeat_region"), c("Begin", "End")]
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "polyA_signal"), ] %>% nrow() #104
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "polyA_signal"), c("Begin", "End")]
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "Gene"), ] %>% nrow() #163
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "Gene"), c("Begin", "End")]
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "CDS"), ] %>% nrow() #176
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "CDS"), c("Begin", "End")]
# Les régions répétées se chevauchent
F_pos_gbkey <- function(col, nom_1, nom_2, table, gbkey){
df <- df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == gbkey), ]
table<- data.frame()
for(i in df$TRUE_ID){ # i prend chaque nom d'ORF
begin <- df[which(df$TRUE_ID == i),"Begin"] #Begin prend la valeur de position de début de l'ORF
end <- df[which(df$TRUE_ID == i),"End"] #End, la valeur de fin
pb <- c(begin:end) #création d'un vecteur pb qui va du début à la fin de l'ORF (ses paires de bases)
df1 <- data.frame(i, pb) # on en fait un df qui associe une paire de base à l'ORF
names(df1)[1] <- nom_1 #modif du nom de la colonne
names(df1)[2] <- nom_2
table <- rbind(table, df1) # on empile les df au fur et à mesure que ça boucle
}
return(table)
}
# Je vais prendre en compte les queues polyA, les Genes et les CDS
table_polyA <- F_pos_gbkey(table = table_polyA, nom_1 = "polyA_signal", nom_2 = "POS", gbkey = "polyA_signal" )
table_ORF <- F_pos_gbkey(table = table_ORF, nom_1 = "ORF", nom_2 = "POS", gbkey = "Gene" )
#Certains ORF se chevauchent aussi
table_CDS <- F_pos_gbkey(table = table_CDS,  nom_1 = "CDS", nom_2 = "POS", gbkey = "CDS" )
CyHV3_ref$POS_factor <- as.factor(CyHV3_ref$POS)
table_polyA$POS_factor <- as.factor(table_polyA$POS)
table_ORF$POS_factor <- as.factor(table_ORF$POS)
table_CDS$POS_factor <- as.factor(table_CDS$POS)
CyHV3_ref$POS <- as.numeric(CyHV3_ref$POS)
CyHV3_ref <- CyHV3_ref %>% relocate(POS_factor, .after = POS)
CyHV3_ref_2 <- left_join(CyHV3_ref, table_polyA)
CyHV3_ref_2 <- left_join(CyHV3_ref_2, table_ORF)
CyHV3_ref_2 <- left_join(CyHV3_ref_2, table_CDS)
CyHV3_ref_2[which(is.na(CyHV3_ref_2$ORF) == FALSE),]
remove(table_CDS, table_ORF, table_polyA)
df_snp_with_ORF$POS_factor <- as.factor(df_snp_with_ORF$POSITION)
df_sv_with_ORF$POS_factor <- as.factor(df_sv_with_ORF$POSITION)
library(tidyverse)
library(dplyr)
library(Biostrings)
library(ape)
library(stringr)
setwd("E:\\github\\BILL_2025\\R")
df_CyHV3_genbank <- read.csv(".\\fichiers_utilises\\annotation_genes_CyHV3_genbank.csv" , header = TRUE, sep = "\t",  na ="NA", stringsAsFactors = FALSE)
df_CDS_genbank_2 <- read.csv(".\\fichiers_utilises\\CDS_genbank_2.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
#df_snp <- read.csv(".\\fichiers_utilises\\snp.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
#df_sv <- read.csv(".\\fichiers_utilises\\sv.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
df_sv_with_ORF <- read.csv(".\\fichiers_utilises\\sv_with_ORF.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
df_snp_with_ORF <- read.csv(".\\fichiers_utilises\\sp_with_ORF.csv" , header = TRUE, sep = ",",  na ="NA", stringsAsFactors = FALSE)
CyHV3_ref<-read.dna(".\\fichiers_utilises\\sequence_reference.fasta", format="fasta", as.character=TRUE)
for (i in 1:ncol(CyHV3_ref)) {
CyHV3_ref[,i] <- str_to_upper(CyHV3_ref[,i]) # comme les nucléotides sont ecris en minuscules, je les met en majuscule
}
CyHV3_ref[,c(1:50)] #montrer les 50 premières colonnes de la matrice
CyHV3_ref[,c(1:50)] #pareil mais pour le dataframe
CyHV3_ref <- as.data.frame(CyHV3_ref, header = TRUE) # transformation de la matrice en df
colnames(CyHV3_ref) <- gsub("^V", "", colnames(CyHV3_ref)) # modification du nom des colonnes
CyHV3_ref %>% ncol() #normalement il doit y avoir autant de colonnes que de paires de bases dans le génomes
CyHV3_ref <- CyHV3_ref %>% pivot_longer(cols = c(1:295146)) #la ligne devient colonne et les colonnes deviennent les lignes
CyHV3_ref$value %>% unique() #il y a bien que A, C, G, T comme valeur
#modification du nom des colonnes
names(CyHV3_ref)[1] <- "POS"
names(CyHV3_ref)[2] <- "REF_plus"
CyHV3_ref <- CyHV3_ref %>% dplyr::mutate(REF_moins = case_when(CyHV3_ref$REF_plus == "A" ~ "T" ,
CyHV3_ref$REF_plus == "T" ~ "A",
CyHV3_ref$REF_plus == "G" ~ "C",
CyHV3_ref$REF_plus == "C" ~ "G"))
df_CDS_genbank_2 %>% nrow()
sapply(df_CDS_genbank_2, FUN = function(x) length(unique(x)))
df_CDS_genbank_2$gbkey %>% unique()
df_CDS_genbank_2$Region %>% unique()
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "repeat_region"), ] %>% nrow() #6
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "repeat_region"), c("Begin", "End")]
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "polyA_signal"), ] %>% nrow() #104
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "polyA_signal"), c("Begin", "End")]
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "Gene"), ] %>% nrow() #163
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "Gene"), c("Begin", "End")]
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "CDS"), ] %>% nrow() #176
df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == "CDS"), c("Begin", "End")]
# Les régions répétées se chevauchent
F_pos_gbkey <- function(col, nom_1, nom_2, table, gbkey){
df <- df_CDS_genbank_2[which(df_CDS_genbank_2$gbkey == gbkey), ]
table<- data.frame()
for(i in df$TRUE_ID){ # i prend chaque nom d'ORF
begin <- df[which(df$TRUE_ID == i),"Begin"] #Begin prend la valeur de position de début de l'ORF
end <- df[which(df$TRUE_ID == i),"End"] #End, la valeur de fin
pb <- c(begin:end) #création d'un vecteur pb qui va du début à la fin de l'ORF (ses paires de bases)
df1 <- data.frame(i, pb) # on en fait un df qui associe une paire de base à l'ORF
names(df1)[1] <- nom_1 #modif du nom de la colonne
names(df1)[2] <- nom_2
table <- rbind(table, df1) # on empile les df au fur et à mesure que ça boucle
}
return(table)
}
# Je vais prendre en compte les queues polyA, les Genes et les CDS
table_polyA <- F_pos_gbkey(table = table_polyA, nom_1 = "polyA_signal", nom_2 = "POS", gbkey = "polyA_signal" )
table_ORF <- F_pos_gbkey(table = table_ORF, nom_1 = "ORF", nom_2 = "POS", gbkey = "Gene" )
#Certains ORF se chevauchent aussi
table_CDS <- F_pos_gbkey(table = table_CDS,  nom_1 = "CDS", nom_2 = "POS", gbkey = "CDS" )
CyHV3_ref$POS_factor <- as.factor(CyHV3_ref$POS)
table_polyA$POS_factor <- as.factor(table_polyA$POS)
table_ORF$POS_factor <- as.factor(table_ORF$POS)
table_CDS$POS_factor <- as.factor(table_CDS$POS)
CyHV3_ref$POS <- as.numeric(CyHV3_ref$POS)
CyHV3_ref <- CyHV3_ref %>% relocate(POS_factor, .after = POS)
CyHV3_ref_2 <- left_join(CyHV3_ref, table_polyA)
CyHV3_ref_2 <- left_join(CyHV3_ref_2, table_ORF)
CyHV3_ref_2 <- left_join(CyHV3_ref_2, table_CDS)
CyHV3_ref_2[which(is.na(CyHV3_ref_2$ORF) == FALSE),]
remove(table_CDS, table_ORF, table_polyA)
df_snp_with_ORF$POS_factor <- as.factor(df_snp_with_ORF$POSITION)
df_sv_with_ORF$POS_factor <- as.factor(df_sv_with_ORF$POSITION)
View(df_sv_with_ORF)
